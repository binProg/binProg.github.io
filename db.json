{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/BERT学习笔记-李宏毅.md","hash":"e7f93f2d4317ce695c6ee656d0da05d730b14630","modified":1639966333480},{"_id":"source/_posts/Numpy学习笔记.md","hash":"92f1756eb52682498df9d1d122efc470ca7f9434","modified":1640570868029},{"_id":"source/_posts/docker-ports端口禁用.md","hash":"c288627e5e76bf9bb4175caffdafc640cc110484","modified":1640412303357},{"_id":"source/_posts/paper.md","hash":"310bd2b29fb4af9524350dc2a3f9a7edcd6b28df","modified":1640569267580},{"_id":"source/_posts/Docker笔记之基础篇.md","hash":"d8b19bb358bba1576d6bff2dd2812007d7580c42","modified":1639900760400},{"_id":"source/_posts/常用激活函数概要.md","hash":"2dfdc5db4114cc771c2182dac532d37b49824e2b","modified":1639658752537},{"_id":"source/_posts/Docker进阶.md","hash":"d0316fef1c5748a3a7c1c746c05be397aa2e2d10","modified":1639964517044},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1639585886147},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1639585886134},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1639585886151},{"_id":"themes/hexo-theme-next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1639585886243},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1639585886251},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1639585886275},{"_id":"themes/hexo-theme-next/_config.yml","hash":"a0e7100d9394d7dc442497b925c049b4d1db65b7","modified":1639658302723},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1639585886249},{"_id":"themes/hexo-theme-next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1639585886395},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1639585886259},{"_id":"themes/hexo-theme-next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1639585886978},{"_id":"themes/hexo-theme-next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1639585886261},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1639585886159},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1639585886205},{"_id":"themes/hexo-theme-next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1639585886213},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1639585886161},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1639585886199},{"_id":"themes/hexo-theme-next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1639585886206},{"_id":"themes/hexo-theme-next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1639585886220},{"_id":"themes/hexo-theme-next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1639585886221},{"_id":"themes/hexo-theme-next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1639585886228},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1639585886285},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1639585886234},{"_id":"themes/hexo-theme-next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1639585886237},{"_id":"themes/hexo-theme-next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1639585886286},{"_id":"themes/hexo-theme-next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1639585886302},{"_id":"themes/hexo-theme-next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1639585886301},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1639585886294},{"_id":"themes/hexo-theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1639585886310},{"_id":"themes/hexo-theme-next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1639585886403},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1639585886408},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1639585886311},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1639585886416},{"_id":"themes/hexo-theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1639585886320},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1639585886417},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1639585886410},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1639585886425},{"_id":"themes/hexo-theme-next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1639585886317},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1639585886427},{"_id":"themes/hexo-theme-next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1639585886434},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1639585886443},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1639585886438},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1639585886442},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1639585886447},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1639585886463},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1639585886452},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1639585886469},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1639585886456},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1639585886468},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1639585886502},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1639585886478},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1639585886473},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1639585886482},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1639585886491},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1639585886954},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1639585886486},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1639585886959},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1639585886969},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1639585886961},{"_id":"themes/hexo-theme-next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1639585887160},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1639585886974},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1639585886965},{"_id":"themes/hexo-theme-next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1639585886331},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1639585886174},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1639585886183},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1639585886188},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1639585886194},{"_id":"themes/hexo-theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1639585886353},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1639585886362},{"_id":"themes/hexo-theme-next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1639585886335},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1639585886358},{"_id":"themes/hexo-theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1639585886345},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1639585886338},{"_id":"themes/hexo-theme-next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1639585886368},{"_id":"themes/hexo-theme-next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1639585886370},{"_id":"themes/hexo-theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1639585886378},{"_id":"themes/hexo-theme-next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1639585886382},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1639585886528},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1639585886386},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1639585886516},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1639585886511},{"_id":"themes/hexo-theme-next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1639585886723},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1639585886529},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1639585886520},{"_id":"themes/hexo-theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1639585886391},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1639585886648},{"_id":"themes/hexo-theme-next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1639585886628},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1639585886724},{"_id":"themes/hexo-theme-next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1639585886742},{"_id":"themes/hexo-theme-next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1639585886767},{"_id":"themes/hexo-theme-next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1639585886715},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1639585886772},{"_id":"themes/hexo-theme-next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1639585886810},{"_id":"themes/hexo-theme-next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1639585886858},{"_id":"themes/hexo-theme-next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1639585887113},{"_id":"themes/hexo-theme-next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1639585887117},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1639585886881},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1639585886889},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1639585887142},{"_id":"themes/hexo-theme-next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1639585887127},{"_id":"themes/hexo-theme-next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1639585887122},{"_id":"themes/hexo-theme-next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1639585886996},{"_id":"themes/hexo-theme-next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1639585887134},{"_id":"themes/hexo-theme-next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1639585887151},{"_id":"themes/hexo-theme-next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1639585887143},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1639585887177},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1639585887168},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1639585887152},{"_id":"themes/hexo-theme-next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1639585887169},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1639585887186},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1639585887195},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1639585887201},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1639585887182},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1639585887188},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1639585887196},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1639585887208},{"_id":"themes/hexo-theme-next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1639585887217},{"_id":"themes/hexo-theme-next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1639585887608},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1639585887746},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1639585887764},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1639585887758},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1639585887774},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1639585887768},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1639585887780},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1639585887790},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1639585887785},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1639585887794},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1639585887801},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1639585887799},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1639585887809},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1639585887827},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1639585887810},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1639585887817},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1639585887833},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1639585887842},{"_id":"themes/hexo-theme-next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1639585887835},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1639585886599},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1639585887844},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1639585886540},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1639585887867},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1639585886546},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1639585886604},{"_id":"themes/hexo-theme-next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1639585887876},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1639585886610},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1639585886641},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1639585886621},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1639585886622},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1639585886661},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1639585886642},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1639585886662},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1639585886692},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1639585886693},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1639585886673},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1639585886700},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1639585886678},{"_id":"themes/hexo-theme-next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1639585886711},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1639585886683},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1639585886737},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1639585886753},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1639585886789},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1639585886752},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1639585886763},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1639585886795},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1639585886758},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1639585886818},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1639585886802},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1639585886819},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1639585886832},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1639585886796},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1639585886839},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1639585886833},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1639585886870},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1639585886847},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1639585886871},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1639585886849},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1639585886897},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1639585886880},{"_id":"themes/hexo-theme-next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1639585886905},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1639585886898},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1639585886857},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1639585886917},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1639585886916},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1639585886944},{"_id":"themes/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1639585887028},{"_id":"themes/hexo-theme-next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1639585887034},{"_id":"themes/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1639585887039},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1639585886927},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1639585886950},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1639585886936},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1639585886928},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1639585887040},{"_id":"themes/hexo-theme-next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1639585887005},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1639585887044},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1639585887015},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1639585887006},{"_id":"themes/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1639585887101},{"_id":"themes/hexo-theme-next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1639585887108},{"_id":"themes/hexo-theme-next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1639585887103},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1639585887860},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1639585887727},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1639585887723},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1639585887856},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1639585887733},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1639585887735},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1639585887923},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1639585887919},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1639585887744},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1639585887233},{"_id":"themes/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1639585887432},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1639585887621},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1639585887441},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1639585887506},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1639585887236},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1639585887503},{"_id":"themes/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1639585887350},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1639585887514},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1639585887245},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1639585887554},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1639585887544},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1639585887689},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1639585887549},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1639585887603},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1639585887559},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1639585887630},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1639585887699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1639585887634},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1639585887693},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1639585887708},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1639585887649},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1639585887705},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1639585887636},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1639585887714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1639585887656},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1639585887661},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1639585887645},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1639585887678},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1639585887667},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1639585887682},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1639585887674},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1639585887906},{"_id":"themes/hexo-theme-next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1639585887393},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1639585887400},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1639585887892},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1639585887402},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1639585887417},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1639585887410},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1639585887427},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1639585887449},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1639585887426},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1639585887418},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1639585887459},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1639585887468},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1639585887466},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1639585887484},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1639585887452},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1639585887255},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1639585887475},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1639585887476},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1639585887261},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1639585887360},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1639585887359},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1639585887489},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1639585887266},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1639585887371},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1639585887494},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1639585887274},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1639585887379},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1639585887272},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1639585887290},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1639585887284},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1639585887294},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1639585887373},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1639585887308},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1639585887303},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1639585887317},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1639585887322},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1639585887307},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1639585887330},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1639585887335},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1639585887323},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1639585887568},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1639585887523},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1639585887338},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1639585887526},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1639585887571},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1639585887576},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1639585887342},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1639585887588},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1639585887584},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1639585887536},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1639585887533},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1639585887590},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1639585887595},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1639585887901},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1639585887911},{"_id":"public/2021/12/26/paper/index.html","hash":"830bcaf814ff5ae977dabd74f458ead9984ea72b","modified":1640570917048},{"_id":"public/2021/12/25/docker-ports端口禁用/index.html","hash":"5b2f5b28ec8525cd1a93bf15bac95979c0f932d0","modified":1640570917048},{"_id":"public/archives/index.html","hash":"50493e4812d821d9e5540d49282c74cc9f0832df","modified":1640570917048},{"_id":"public/2021/12/27/Numpy学习笔记/index.html","hash":"724e99b2079623cba40e16936ca014b7e318d1e8","modified":1640570917048},{"_id":"public/2021/12/20/Docker进阶/index.html","hash":"27971499617b00ab8f2e507f0cbcb978d5954b8e","modified":1640570917048},{"_id":"public/2021/12/15/常用激活函数概要/index.html","hash":"40498840e60685279c80d85ef0286b490119254a","modified":1640570917048},{"_id":"public/2021/12/15/BERT学习笔记-李宏毅/index.html","hash":"df67a75978fc3fc72debb9923e246c284e9c21eb","modified":1640570917048},{"_id":"public/2021/12/15/Docker笔记之基础篇/index.html","hash":"f4391959e0a0342f896ab9a3d482a84cfc44b42c","modified":1640570917048},{"_id":"public/archives/2021/index.html","hash":"f66dec18f2434a4a1a6d6a6e459f07c8bb36665b","modified":1640570917048},{"_id":"public/archives/2021/12/index.html","hash":"ad2683cded4709380b4113db8fdd162633089a91","modified":1640570917048},{"_id":"public/tags/nlp-Bert/index.html","hash":"000de855d2af13ca16ae3edcf7a500807ed4a897","modified":1640570917048},{"_id":"public/tags/Docker/index.html","hash":"cd39cf3cf895657fe45b6ddf758e20642438da24","modified":1640570917048},{"_id":"public/tags/docker-工具问题集/index.html","hash":"62d9e8d165ee05dd811282a40a2f414d693f9397","modified":1640570917048},{"_id":"public/tags/Numpy/index.html","hash":"c8294efc0f8859d29604286e76f5d0ea8b19a2bd","modified":1640570917048},{"_id":"public/tags/paper/index.html","hash":"02836ac7548dcfcb2a7c123c2492915ec575c852","modified":1640570917048},{"_id":"public/tags/nlp-激活函数/index.html","hash":"c486453346e0e98e0875c51393119292712e4bbe","modified":1640570917048},{"_id":"public/index.html","hash":"40e77ce7acf601b9849890edc63bae73c5fa8daf","modified":1640570917048},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1640570917048},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1640570917048},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1640570917048},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1640570917048},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1640570917048},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1640570917048},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1640570917048},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1640570917048},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1640570917048},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1640570917048},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1640570917048},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1640570917048},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1640570917048},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1640570917048},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1640570917048},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1640570917048},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1640570917048},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1640570917048},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1640570917048},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1640570917048},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1640570917048},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1640570917048},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1640570917048},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1640570917048},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1640570917048},{"_id":"public/css/main.css","hash":"8bf72fd43dcc91830479c47232f43e7212412cfd","modified":1640570917048},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1640570917048},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1640570917048},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1640570917048}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"BERT学习笔记--李宏毅","date":"2021-12-15T12:46:32.000Z","mathjax":true,"_content":"\n# BERT学习笔记(原理篇1)\n\n> 1. 机器学习最早使用**1-of-N encoding**，把每个词汇表示成一个N维的向量，N维向量中只有1个1，其余全是0。造成维度爆炸，且各个词汇之间的上下文关系和语义关系都没有考虑进去。\n> 2. 接着，有了**Word Class**的概念，比如 dog/bird/fish是一类，因为都是动物。但是只关注了类间单词的区别而忽略了类内单词的区别\n> 3. 进阶的，有了**Word Embedding**的概念，用dense vector（向量）来表示一个词，意思相近的词其向量之间的距离较近。常见的Word Embedding方法有word2vec, GloVe等\n\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F2021031620201211.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDE3NzU5NA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642056957&t=8dcbc4be84686bc9ccd1e1ba051e10a0\" width=\"500px\" height=\"350px\" />\n\n## 一、Introduction \n\nELMO: RNN-based language model， trained from lots of sentences\n\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fb4e03affb8f391fca6cb35d5a9e164c6.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642056079&t=f237adc41fa64029446bde333612455c\" width =\"500px\" height=\"500px\" />\n\n\n\nBERT: Encoder of Transformer\n\n## 二、Training of BERT\n\n- Approach 1：MASKED LM\n  - 相当于完型填空，即随机覆盖住15%的词，去预测覆盖住的词\n- Approach 2： NEXT SENTENCE PREDICTION\n  - 做句子之间的判断，判断两个句子是否存在上下文关系\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20210223193921145.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzODA2MQ%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642055881&t=6df93deba3f9b048d2cdd6789939d97e)\n\n## 三、How to use BERT aka:Bert的应用\n\n### CASE 1:  决定一整个句子属于那个类别（句子的分类）\n\n<img src=\"https://tse4-mm.cn.bing.net/th/id/OIP-C.oDJW0d8K-EIKnlBZ1S13TwHaFn?pid=ImgDet&rs=1\" aligin=\"center\">\n\n> **[CLS]**：代表分类的特殊符号，放在开头是因为Bert是基于Transformer的，而Transformer基于self-attention，即**每个位置都会得到整个位置的句子信息**，所以不需要放在最后\n\n### Case 2: 决定一个句子中每个单词所属的类别\n\n<img src=\"https://tse1-mm.cn.bing.net/th/id/OIP-C.zzrwVkfLyNFk2tc1hroTLwHaFU?pid=ImgDet&rs=1\">\n\n> 如：决定一个句子中w1是位置词还是时间词还是其它词\n\n### CASE 3: 根据Sentence1（前提）决定Sentence2（假设）是对还是错\n\n<img src=\"https://img-blog.csdnimg.cn/20210306173935877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hlcm9zdW5seQ==,size_16,color_FFFFFF,t_70\" width=\"500px\">\n\n### CASE 4: QA\n\n<img src=\"https://tse1-mm.cn.bing.net/th/id/OIP-C.54m5zFtXFwz6b6PXf_s6CAHaFR?pid=ImgDet&rs=1\" aligin=\"center\">\n\nInput：文章+问题   ===>  Output：答案在文章中起始位置 $A = \\{d_s, \\cdots, d_e\\}$ \n\n​          <img src=\"https://tse4-mm.cn.bing.net/th/id/OIP-C.8uzrcyIwoOhxi0z68ozRxAHaFg?pid=ImgDet&rs=1\" width=\"500\">\n\n\n\n<img src=\"https://tse3-mm.cn.bing.net/th/id/OIP-C.ej_jhIuiHIo2Vt8bGZ-FGQHaFK?pid=ImgDet&rs=1\" width=\"500\">\n\n## 四、扩展-ERNIE\n\n<img src=\"https://tse1-mm.cn.bing.net/th/id/OIP-C.y30CYJ41Pba7iwXAzXBV7AHaFh?pid=ImgDet&rs=1\">\n\n针对中文的MASK提出的想法：\n\n- BERT中做MASK时，MASK的是中文中的一个字，通过上下文很容易predict出被MASK的词是什么。而且不符合中文的实际，中文语义是以***词*** 为单位，而英文语义是一个字或者word为单位。\n- ERNIE则是专为中文设计的MASK方法，每次以中文的“词”为单位进行MASK和分类预测，而不再以单个的字为单位进行分类预测。\n\n目前的变种实现有：\n\n- 华为：ZEN\n- 清华：ERNIE-T\n\n## 参考链接\n\n1. 《李宏毅Bert学习笔记 》<https://blog.csdn.net/herosunly/article/details/94720139>  ","source":"_posts/BERT学习笔记-李宏毅.md","raw":"---\ntitle: BERT学习笔记--李宏毅\ndate: 2021-12-15 20:46:32\ntags: nlp Bert\nmathjax: true\n---\n\n# BERT学习笔记(原理篇1)\n\n> 1. 机器学习最早使用**1-of-N encoding**，把每个词汇表示成一个N维的向量，N维向量中只有1个1，其余全是0。造成维度爆炸，且各个词汇之间的上下文关系和语义关系都没有考虑进去。\n> 2. 接着，有了**Word Class**的概念，比如 dog/bird/fish是一类，因为都是动物。但是只关注了类间单词的区别而忽略了类内单词的区别\n> 3. 进阶的，有了**Word Embedding**的概念，用dense vector（向量）来表示一个词，意思相近的词其向量之间的距离较近。常见的Word Embedding方法有word2vec, GloVe等\n\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F2021031620201211.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDE3NzU5NA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642056957&t=8dcbc4be84686bc9ccd1e1ba051e10a0\" width=\"500px\" height=\"350px\" />\n\n## 一、Introduction \n\nELMO: RNN-based language model， trained from lots of sentences\n\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fb4e03affb8f391fca6cb35d5a9e164c6.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642056079&t=f237adc41fa64029446bde333612455c\" width =\"500px\" height=\"500px\" />\n\n\n\nBERT: Encoder of Transformer\n\n## 二、Training of BERT\n\n- Approach 1：MASKED LM\n  - 相当于完型填空，即随机覆盖住15%的词，去预测覆盖住的词\n- Approach 2： NEXT SENTENCE PREDICTION\n  - 做句子之间的判断，判断两个句子是否存在上下文关系\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20210223193921145.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzODA2MQ%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642055881&t=6df93deba3f9b048d2cdd6789939d97e)\n\n## 三、How to use BERT aka:Bert的应用\n\n### CASE 1:  决定一整个句子属于那个类别（句子的分类）\n\n<img src=\"https://tse4-mm.cn.bing.net/th/id/OIP-C.oDJW0d8K-EIKnlBZ1S13TwHaFn?pid=ImgDet&rs=1\" aligin=\"center\">\n\n> **[CLS]**：代表分类的特殊符号，放在开头是因为Bert是基于Transformer的，而Transformer基于self-attention，即**每个位置都会得到整个位置的句子信息**，所以不需要放在最后\n\n### Case 2: 决定一个句子中每个单词所属的类别\n\n<img src=\"https://tse1-mm.cn.bing.net/th/id/OIP-C.zzrwVkfLyNFk2tc1hroTLwHaFU?pid=ImgDet&rs=1\">\n\n> 如：决定一个句子中w1是位置词还是时间词还是其它词\n\n### CASE 3: 根据Sentence1（前提）决定Sentence2（假设）是对还是错\n\n<img src=\"https://img-blog.csdnimg.cn/20210306173935877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hlcm9zdW5seQ==,size_16,color_FFFFFF,t_70\" width=\"500px\">\n\n### CASE 4: QA\n\n<img src=\"https://tse1-mm.cn.bing.net/th/id/OIP-C.54m5zFtXFwz6b6PXf_s6CAHaFR?pid=ImgDet&rs=1\" aligin=\"center\">\n\nInput：文章+问题   ===>  Output：答案在文章中起始位置 $A = \\{d_s, \\cdots, d_e\\}$ \n\n​          <img src=\"https://tse4-mm.cn.bing.net/th/id/OIP-C.8uzrcyIwoOhxi0z68ozRxAHaFg?pid=ImgDet&rs=1\" width=\"500\">\n\n\n\n<img src=\"https://tse3-mm.cn.bing.net/th/id/OIP-C.ej_jhIuiHIo2Vt8bGZ-FGQHaFK?pid=ImgDet&rs=1\" width=\"500\">\n\n## 四、扩展-ERNIE\n\n<img src=\"https://tse1-mm.cn.bing.net/th/id/OIP-C.y30CYJ41Pba7iwXAzXBV7AHaFh?pid=ImgDet&rs=1\">\n\n针对中文的MASK提出的想法：\n\n- BERT中做MASK时，MASK的是中文中的一个字，通过上下文很容易predict出被MASK的词是什么。而且不符合中文的实际，中文语义是以***词*** 为单位，而英文语义是一个字或者word为单位。\n- ERNIE则是专为中文设计的MASK方法，每次以中文的“词”为单位进行MASK和分类预测，而不再以单个的字为单位进行分类预测。\n\n目前的变种实现有：\n\n- 华为：ZEN\n- 清华：ERNIE-T\n\n## 参考链接\n\n1. 《李宏毅Bert学习笔记 》<https://blog.csdn.net/herosunly/article/details/94720139>  ","slug":"BERT学习笔记-李宏毅","published":1,"updated":"2021-12-20T02:12:13.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxo1kfkd0000dwtf3w33h5le","content":"<h1 id=\"bert学习笔记原理篇1\"><a class=\"markdownIt-Anchor\" href=\"#bert学习笔记原理篇1\"></a> BERT学习笔记(原理篇1)</h1>\n<blockquote>\n<ol>\n<li>机器学习最早使用<strong>1-of-N encoding</strong>，把每个词汇表示成一个N维的向量，N维向量中只有1个1，其余全是0。造成维度爆炸，且各个词汇之间的上下文关系和语义关系都没有考虑进去。</li>\n<li>接着，有了<strong>Word Class</strong>的概念，比如 dog/bird/fish是一类，因为都是动物。但是只关注了类间单词的区别而忽略了类内单词的区别</li>\n<li>进阶的，有了<strong>Word Embedding</strong>的概念，用dense vector（向量）来表示一个词，意思相近的词其向量之间的距离较近。常见的Word Embedding方法有word2vec, GloVe等</li>\n</ol>\n</blockquote>\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F2021031620201211.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDE3NzU5NA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642056957&t=8dcbc4be84686bc9ccd1e1ba051e10a0\" width=\"500px\" height=\"350px\" />\n<h2 id=\"一-introduction\"><a class=\"markdownIt-Anchor\" href=\"#一-introduction\"></a> 一、Introduction</h2>\n<p>ELMO: RNN-based language model， trained from lots of sentences</p>\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fb4e03affb8f391fca6cb35d5a9e164c6.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642056079&t=f237adc41fa64029446bde333612455c\" width =\"500px\" height=\"500px\" />\n<p>BERT: Encoder of Transformer</p>\n<h2 id=\"二-training-of-bert\"><a class=\"markdownIt-Anchor\" href=\"#二-training-of-bert\"></a> 二、Training of BERT</h2>\n<ul>\n<li>Approach 1：MASKED LM\n<ul>\n<li>相当于完型填空，即随机覆盖住15%的词，去预测覆盖住的词</li>\n</ul>\n</li>\n<li>Approach 2： NEXT SENTENCE PREDICTION\n<ul>\n<li>做句子之间的判断，判断两个句子是否存在上下文关系</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20210223193921145.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzODA2MQ%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70&amp;refer=http%3A%2F%2Fimg-blog.csdnimg.cn&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1642055881&amp;t=6df93deba3f9b048d2cdd6789939d97e\" alt=\"img\" /></p>\n<h2 id=\"三-how-to-use-bert-akabert的应用\"><a class=\"markdownIt-Anchor\" href=\"#三-how-to-use-bert-akabert的应用\"></a> 三、How to use BERT aka:Bert的应用</h2>\n<h3 id=\"case-1-决定一整个句子属于那个类别句子的分类\"><a class=\"markdownIt-Anchor\" href=\"#case-1-决定一整个句子属于那个类别句子的分类\"></a> CASE 1:  决定一整个句子属于那个类别（句子的分类）</h3>\n<img src=\"https://tse4-mm.cn.bing.net/th/id/OIP-C.oDJW0d8K-EIKnlBZ1S13TwHaFn?pid=ImgDet&rs=1\" aligin=\"center\">\n<blockquote>\n<p><strong>[CLS]</strong>：代表分类的特殊符号，放在开头是因为Bert是基于Transformer的，而Transformer基于self-attention，即<strong>每个位置都会得到整个位置的句子信息</strong>，所以不需要放在最后</p>\n</blockquote>\n<h3 id=\"case-2-决定一个句子中每个单词所属的类别\"><a class=\"markdownIt-Anchor\" href=\"#case-2-决定一个句子中每个单词所属的类别\"></a> Case 2: 决定一个句子中每个单词所属的类别</h3>\n<img src=\"https://tse1-mm.cn.bing.net/th/id/OIP-C.zzrwVkfLyNFk2tc1hroTLwHaFU?pid=ImgDet&rs=1\">\n<blockquote>\n<p>如：决定一个句子中w1是位置词还是时间词还是其它词</p>\n</blockquote>\n<h3 id=\"case-3-根据sentence1前提决定sentence2假设是对还是错\"><a class=\"markdownIt-Anchor\" href=\"#case-3-根据sentence1前提决定sentence2假设是对还是错\"></a> CASE 3: 根据Sentence1（前提）决定Sentence2（假设）是对还是错</h3>\n<img src=\"https://img-blog.csdnimg.cn/20210306173935877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hlcm9zdW5seQ==,size_16,color_FFFFFF,t_70\" width=\"500px\">\n<h3 id=\"case-4-qa\"><a class=\"markdownIt-Anchor\" href=\"#case-4-qa\"></a> CASE 4: QA</h3>\n<img src=\"https://tse1-mm.cn.bing.net/th/id/OIP-C.54m5zFtXFwz6b6PXf_s6CAHaFR?pid=ImgDet&rs=1\" aligin=\"center\">\n<p>Input：文章+问题   ===&gt;  Output：答案在文章中起始位置 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>d</mi><mi>s</mi></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>d</mi><mi>e</mi></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">A = \\{d_s, \\cdots, d_e\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></p>\n<p>​          <img src=\"https://tse4-mm.cn.bing.net/th/id/OIP-C.8uzrcyIwoOhxi0z68ozRxAHaFg?pid=ImgDet&rs=1\" width=\"500\"></p>\n<img src=\"https://tse3-mm.cn.bing.net/th/id/OIP-C.ej_jhIuiHIo2Vt8bGZ-FGQHaFK?pid=ImgDet&rs=1\" width=\"500\">\n<h2 id=\"四-扩展-ernie\"><a class=\"markdownIt-Anchor\" href=\"#四-扩展-ernie\"></a> 四、扩展-ERNIE</h2>\n<img src=\"https://tse1-mm.cn.bing.net/th/id/OIP-C.y30CYJ41Pba7iwXAzXBV7AHaFh?pid=ImgDet&rs=1\">\n<p>针对中文的MASK提出的想法：</p>\n<ul>\n<li>BERT中做MASK时，MASK的是中文中的一个字，通过上下文很容易predict出被MASK的词是什么。而且不符合中文的实际，中文语义是以***词*** 为单位，而英文语义是一个字或者word为单位。</li>\n<li>ERNIE则是专为中文设计的MASK方法，每次以中文的“词”为单位进行MASK和分类预测，而不再以单个的字为单位进行分类预测。</li>\n</ul>\n<p>目前的变种实现有：</p>\n<ul>\n<li>华为：ZEN</li>\n<li>清华：ERNIE-T</li>\n</ul>\n<h2 id=\"参考链接\"><a class=\"markdownIt-Anchor\" href=\"#参考链接\"></a> 参考链接</h2>\n<ol>\n<li>《李宏毅Bert学习笔记 》<a href=\"https://blog.csdn.net/herosunly/article/details/94720139\">https://blog.csdn.net/herosunly/article/details/94720139</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"bert学习笔记原理篇1\"><a class=\"markdownIt-Anchor\" href=\"#bert学习笔记原理篇1\"></a> BERT学习笔记(原理篇1)</h1>\n<blockquote>\n<ol>\n<li>机器学习最早使用<strong>1-of-N encoding</strong>，把每个词汇表示成一个N维的向量，N维向量中只有1个1，其余全是0。造成维度爆炸，且各个词汇之间的上下文关系和语义关系都没有考虑进去。</li>\n<li>接着，有了<strong>Word Class</strong>的概念，比如 dog/bird/fish是一类，因为都是动物。但是只关注了类间单词的区别而忽略了类内单词的区别</li>\n<li>进阶的，有了<strong>Word Embedding</strong>的概念，用dense vector（向量）来表示一个词，意思相近的词其向量之间的距离较近。常见的Word Embedding方法有word2vec, GloVe等</li>\n</ol>\n</blockquote>\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F2021031620201211.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDE3NzU5NA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642056957&t=8dcbc4be84686bc9ccd1e1ba051e10a0\" width=\"500px\" height=\"350px\" />\n<h2 id=\"一-introduction\"><a class=\"markdownIt-Anchor\" href=\"#一-introduction\"></a> 一、Introduction</h2>\n<p>ELMO: RNN-based language model， trained from lots of sentences</p>\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fb4e03affb8f391fca6cb35d5a9e164c6.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642056079&t=f237adc41fa64029446bde333612455c\" width =\"500px\" height=\"500px\" />\n<p>BERT: Encoder of Transformer</p>\n<h2 id=\"二-training-of-bert\"><a class=\"markdownIt-Anchor\" href=\"#二-training-of-bert\"></a> 二、Training of BERT</h2>\n<ul>\n<li>Approach 1：MASKED LM\n<ul>\n<li>相当于完型填空，即随机覆盖住15%的词，去预测覆盖住的词</li>\n</ul>\n</li>\n<li>Approach 2： NEXT SENTENCE PREDICTION\n<ul>\n<li>做句子之间的判断，判断两个句子是否存在上下文关系</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20210223193921145.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzODA2MQ%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70&amp;refer=http%3A%2F%2Fimg-blog.csdnimg.cn&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1642055881&amp;t=6df93deba3f9b048d2cdd6789939d97e\" alt=\"img\" /></p>\n<h2 id=\"三-how-to-use-bert-akabert的应用\"><a class=\"markdownIt-Anchor\" href=\"#三-how-to-use-bert-akabert的应用\"></a> 三、How to use BERT aka:Bert的应用</h2>\n<h3 id=\"case-1-决定一整个句子属于那个类别句子的分类\"><a class=\"markdownIt-Anchor\" href=\"#case-1-决定一整个句子属于那个类别句子的分类\"></a> CASE 1:  决定一整个句子属于那个类别（句子的分类）</h3>\n<img src=\"https://tse4-mm.cn.bing.net/th/id/OIP-C.oDJW0d8K-EIKnlBZ1S13TwHaFn?pid=ImgDet&rs=1\" aligin=\"center\">\n<blockquote>\n<p><strong>[CLS]</strong>：代表分类的特殊符号，放在开头是因为Bert是基于Transformer的，而Transformer基于self-attention，即<strong>每个位置都会得到整个位置的句子信息</strong>，所以不需要放在最后</p>\n</blockquote>\n<h3 id=\"case-2-决定一个句子中每个单词所属的类别\"><a class=\"markdownIt-Anchor\" href=\"#case-2-决定一个句子中每个单词所属的类别\"></a> Case 2: 决定一个句子中每个单词所属的类别</h3>\n<img src=\"https://tse1-mm.cn.bing.net/th/id/OIP-C.zzrwVkfLyNFk2tc1hroTLwHaFU?pid=ImgDet&rs=1\">\n<blockquote>\n<p>如：决定一个句子中w1是位置词还是时间词还是其它词</p>\n</blockquote>\n<h3 id=\"case-3-根据sentence1前提决定sentence2假设是对还是错\"><a class=\"markdownIt-Anchor\" href=\"#case-3-根据sentence1前提决定sentence2假设是对还是错\"></a> CASE 3: 根据Sentence1（前提）决定Sentence2（假设）是对还是错</h3>\n<img src=\"https://img-blog.csdnimg.cn/20210306173935877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hlcm9zdW5seQ==,size_16,color_FFFFFF,t_70\" width=\"500px\">\n<h3 id=\"case-4-qa\"><a class=\"markdownIt-Anchor\" href=\"#case-4-qa\"></a> CASE 4: QA</h3>\n<img src=\"https://tse1-mm.cn.bing.net/th/id/OIP-C.54m5zFtXFwz6b6PXf_s6CAHaFR?pid=ImgDet&rs=1\" aligin=\"center\">\n<p>Input：文章+问题   ===&gt;  Output：答案在文章中起始位置 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>d</mi><mi>s</mi></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>d</mi><mi>e</mi></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">A = \\{d_s, \\cdots, d_e\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></p>\n<p>​          <img src=\"https://tse4-mm.cn.bing.net/th/id/OIP-C.8uzrcyIwoOhxi0z68ozRxAHaFg?pid=ImgDet&rs=1\" width=\"500\"></p>\n<img src=\"https://tse3-mm.cn.bing.net/th/id/OIP-C.ej_jhIuiHIo2Vt8bGZ-FGQHaFK?pid=ImgDet&rs=1\" width=\"500\">\n<h2 id=\"四-扩展-ernie\"><a class=\"markdownIt-Anchor\" href=\"#四-扩展-ernie\"></a> 四、扩展-ERNIE</h2>\n<img src=\"https://tse1-mm.cn.bing.net/th/id/OIP-C.y30CYJ41Pba7iwXAzXBV7AHaFh?pid=ImgDet&rs=1\">\n<p>针对中文的MASK提出的想法：</p>\n<ul>\n<li>BERT中做MASK时，MASK的是中文中的一个字，通过上下文很容易predict出被MASK的词是什么。而且不符合中文的实际，中文语义是以***词*** 为单位，而英文语义是一个字或者word为单位。</li>\n<li>ERNIE则是专为中文设计的MASK方法，每次以中文的“词”为单位进行MASK和分类预测，而不再以单个的字为单位进行分类预测。</li>\n</ul>\n<p>目前的变种实现有：</p>\n<ul>\n<li>华为：ZEN</li>\n<li>清华：ERNIE-T</li>\n</ul>\n<h2 id=\"参考链接\"><a class=\"markdownIt-Anchor\" href=\"#参考链接\"></a> 参考链接</h2>\n<ol>\n<li>《李宏毅Bert学习笔记 》<a href=\"https://blog.csdn.net/herosunly/article/details/94720139\">https://blog.csdn.net/herosunly/article/details/94720139</a></li>\n</ol>\n"},{"title":"Docker笔记之基础篇","date":"2021-12-15T12:44:43.000Z","mathjax":true,"_content":"\n\n\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.orphadata.org%2Fcgi-bin%2Fimg%2Fbody%2Fontologies%2Fdocker.png&refer=http%3A%2F%2Fwww.orphadata.org&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1641898195&t=63f4be05817a4cd9795000d4bb060979\" style=\"zoom:100%\">\n\n # Docker基础\n\n## 一、基本组成\n\n<img src=\"https://s4.ax1x.com/2021/12/15/Tp0WPU.png\">\n\n**镜像：**可以通过镜像来创建容器， app镜像===>run===>app容器（提供服务），一个镜像可以启动多个容器（分布式集群的搭建）\n\n**容器：**Docker通过容器技术，独立运行一个或者一组应用。一个容器相当于一个简易的linux系统\n\n**仓库：**存放镜像的地方，分为公有仓库和私有仓库\n\n配置阿里云官方镜像加速器：\n\n1. `sudo mkdir -p /etc/docker`\n\n2. `sudo tee /etc/docker/daemon.json <<-'EOF'`\n\n   `{`\n\n   `\"registry-mirrors\": [\"http://hd1esep4.mirror.aliyuncs.com\"]`\n\n   `}`\n\n   `EOF`\n\n3. `sudo systemctl daemon-reload`\n\n4. `sudo systemctl restart docker`\n\n## 二、docker的镜像run的流程图\n\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBERg.png\">\n\n## 三、Docker底层原理\n\nDocker是一个CS结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问。DockerServer接收到DockerClient的指令就会执行这个指令\n\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBAJS.png\">\n\n## 四、Docker常用命令\n\n### 链接\n\nhttps://docs.docker.com/engine/reference/commandline\n\n---\n\n### 镜像命令\n\n------\n\n**docker images**：查看本地主机上的镜像\n\n**docker search**：搜索命令\n\n**docker pull**：下载镜像\n\n**docker rmi**： 删除镜像\n\n---\n\n### 容器命令\n\n------\n\n**docker run [可选参数] image** ：新建容器并启动\n\n> 参数说明\n>\n> ​\t--name=\"Name\" 容器名字 xx01  xx02 用来区分容器\n>\n> ​\t--d\t\t\t     后台方式运行\n>\n> ​\t--it\t\t\t      使用交互方式运行，进入容器查看内容\n>\n> ​\t-p                          指定容器的端口   -p 8080：8080\n>\n> - -p ip：主机端口：容器端口\n> - -p 主机端口：容器端口**（常用）**\n> - -p 容器端口\n\n**docker ps**：查看运行中的容器\n\n> -a 查看所有容器（正在运行和历史运行）\n>\n> -n=x 显示最近创建的 x个容器\n>\n> -q 只显示容器的编号\n\n**exit**：停止并退出正在运行的容器\n\n**Ctrl+P+Q**：不停止但退出正在运行的容器\n\n**docker rm 容器id**：删除容器，正在运行的容器必须强制删除-f\n\n**docker start 容器id**：启动容器\n\n**docker restart 容器id**：重启容器\n\n**docker stop 容器id**: 停止当前正在运行的容器\n\n**docker kill 容器id**：强制停止当前容器\n\n**docker top 容器id**：查看容器内部的进程信息\n\n**docker exec -it 容器id /bin/bash**：进入容器后开启一个新的终端，可以在里面操作\n\n**docker attach 容器id**：进入容器正在执行的终端，不回启动新的进程！\n\n**docker cp 1e3d0b0653e8:/home/test.java C:/Users/BINJ/Desktop**：从容器内复制文件到本地主机\n\n> 拷贝（cp）是一个手动过程，使用 -v 卷的技术，可以实现自动同步， /home /home\n\n\n\n## 五、Docker镜像基本原理\n\n## Docker镜像详解\n\n## 镜像概述\n\n1. 镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，包含运行某个软件所需的所有内容，包括：代码、运行时、库、环境变量和配置文件\n2. 所有应用，直接打包docker镜像，就可以直接跑起来\n3. 获取方式：\n   1. 从远程仓库下载\n   2. 别人拷贝给你\n   3. 自己制作一个镜像DockerFile\n\n## Docker镜像加载原理\n\n#### UnionFS（联合文件系统）\n\n> UnionFS是一种分层、轻量级并且高性能的文件系统，支持对文件系统的修改作为一次提交来一层层叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。\n>\n> UnionFS是Docker镜像的基础，镜像可以通过分层来进行继承，基于基础镜像（父镜像）可以制作各种具体的应用镜像\n>\n> 特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录\n\n#### 加载原理\n\n> docker的镜像实际上就是由一层层的文件系统构成的，这种层级的文件系统就是UnionFS\n>\n> **bootfs**(boot file system)主要包含bootloader和kernel，bootloader主要引导加载kernel，Linux刚启动时会加载bootfs文件系统。Docker镜像的最底层就是bootfs，当boot加载完后，整个内核就在内存中了，此时内存的使用权已经由bootfs转交给内核，此时系统也会卸载bootfs\n>\n> **rootfs**，在bootfs之上，包含的就是典型Linux系统中的/dev,/proc,/bin,/etc等标准目录和文件。rootfs就是各种不同的操作系统的发行版本，如Ubuntu，Centos等\n\n#### 分层理解\n\n所有Docker镜像都起始于一个基础镜像层，当进行修改或增加心的内容时，就会在当前镜像层之上，创建新的镜像层。\n\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/A%7B208OI1%7D7_1D)3N3FNN%5BCJ.png\">\n\n特点：\n\n> Docker**镜像**默认都是**只读**的，**当容器启动时**，一个新的**可读写层**被加载到镜像的顶部！这个新的可读写层就是**容器层**，容器层之下的都叫镜像\n>\n> 即，user的所有操作都是基于**容器层**的。原来的镜像层+user自己的容器层 = user发布的新镜像\n\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/3A8618A8021E1F09C26DF1ED8994F223.png\">\n\n\n\n#### Commit镜像\n\n```\ndocker commit 提交容器成为一个新的副本\ndocker commit -m=\"提交的描述信息\" -a=\"作者\" 容器id 目标镜像名:[TAG] \n```\n\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/2%7BID%7DBTJA(MR8Y25ALI2L_3.png\">\n\n## 六、小结\n\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBnLn.png\">\n\n## 六、练习\n\n### 部署一个nginx\n\n> - docker search nginx\n>\n> - docker pull nginx\n>\n> - docker run -d --name nginx01 -p 3344:80 nginx\n>\n> - 测试：\n>\n>   > curl localhost:3344 //向localhost:3344发出GET请求\n\n### 重要：端口暴露\n\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBki8.jpg\">\n\n### 思考\n\n我们每次改动nginx配置文件，都需要进入容器内部？十分麻烦，要是可以在容器外部提供一个映射路径，达到在容器外修改文件名，容器内部就可以自动修改？ -v **容器卷**技术\n\n","source":"_posts/Docker笔记之基础篇.md","raw":"---\ntitle: Docker笔记之基础篇\ndate: 2021-12-15 20:44:43\ntags: Docker\nmathjax: true\n---\n\n\n\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.orphadata.org%2Fcgi-bin%2Fimg%2Fbody%2Fontologies%2Fdocker.png&refer=http%3A%2F%2Fwww.orphadata.org&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1641898195&t=63f4be05817a4cd9795000d4bb060979\" style=\"zoom:100%\">\n\n # Docker基础\n\n## 一、基本组成\n\n<img src=\"https://s4.ax1x.com/2021/12/15/Tp0WPU.png\">\n\n**镜像：**可以通过镜像来创建容器， app镜像===>run===>app容器（提供服务），一个镜像可以启动多个容器（分布式集群的搭建）\n\n**容器：**Docker通过容器技术，独立运行一个或者一组应用。一个容器相当于一个简易的linux系统\n\n**仓库：**存放镜像的地方，分为公有仓库和私有仓库\n\n配置阿里云官方镜像加速器：\n\n1. `sudo mkdir -p /etc/docker`\n\n2. `sudo tee /etc/docker/daemon.json <<-'EOF'`\n\n   `{`\n\n   `\"registry-mirrors\": [\"http://hd1esep4.mirror.aliyuncs.com\"]`\n\n   `}`\n\n   `EOF`\n\n3. `sudo systemctl daemon-reload`\n\n4. `sudo systemctl restart docker`\n\n## 二、docker的镜像run的流程图\n\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBERg.png\">\n\n## 三、Docker底层原理\n\nDocker是一个CS结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问。DockerServer接收到DockerClient的指令就会执行这个指令\n\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBAJS.png\">\n\n## 四、Docker常用命令\n\n### 链接\n\nhttps://docs.docker.com/engine/reference/commandline\n\n---\n\n### 镜像命令\n\n------\n\n**docker images**：查看本地主机上的镜像\n\n**docker search**：搜索命令\n\n**docker pull**：下载镜像\n\n**docker rmi**： 删除镜像\n\n---\n\n### 容器命令\n\n------\n\n**docker run [可选参数] image** ：新建容器并启动\n\n> 参数说明\n>\n> ​\t--name=\"Name\" 容器名字 xx01  xx02 用来区分容器\n>\n> ​\t--d\t\t\t     后台方式运行\n>\n> ​\t--it\t\t\t      使用交互方式运行，进入容器查看内容\n>\n> ​\t-p                          指定容器的端口   -p 8080：8080\n>\n> - -p ip：主机端口：容器端口\n> - -p 主机端口：容器端口**（常用）**\n> - -p 容器端口\n\n**docker ps**：查看运行中的容器\n\n> -a 查看所有容器（正在运行和历史运行）\n>\n> -n=x 显示最近创建的 x个容器\n>\n> -q 只显示容器的编号\n\n**exit**：停止并退出正在运行的容器\n\n**Ctrl+P+Q**：不停止但退出正在运行的容器\n\n**docker rm 容器id**：删除容器，正在运行的容器必须强制删除-f\n\n**docker start 容器id**：启动容器\n\n**docker restart 容器id**：重启容器\n\n**docker stop 容器id**: 停止当前正在运行的容器\n\n**docker kill 容器id**：强制停止当前容器\n\n**docker top 容器id**：查看容器内部的进程信息\n\n**docker exec -it 容器id /bin/bash**：进入容器后开启一个新的终端，可以在里面操作\n\n**docker attach 容器id**：进入容器正在执行的终端，不回启动新的进程！\n\n**docker cp 1e3d0b0653e8:/home/test.java C:/Users/BINJ/Desktop**：从容器内复制文件到本地主机\n\n> 拷贝（cp）是一个手动过程，使用 -v 卷的技术，可以实现自动同步， /home /home\n\n\n\n## 五、Docker镜像基本原理\n\n## Docker镜像详解\n\n## 镜像概述\n\n1. 镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，包含运行某个软件所需的所有内容，包括：代码、运行时、库、环境变量和配置文件\n2. 所有应用，直接打包docker镜像，就可以直接跑起来\n3. 获取方式：\n   1. 从远程仓库下载\n   2. 别人拷贝给你\n   3. 自己制作一个镜像DockerFile\n\n## Docker镜像加载原理\n\n#### UnionFS（联合文件系统）\n\n> UnionFS是一种分层、轻量级并且高性能的文件系统，支持对文件系统的修改作为一次提交来一层层叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。\n>\n> UnionFS是Docker镜像的基础，镜像可以通过分层来进行继承，基于基础镜像（父镜像）可以制作各种具体的应用镜像\n>\n> 特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录\n\n#### 加载原理\n\n> docker的镜像实际上就是由一层层的文件系统构成的，这种层级的文件系统就是UnionFS\n>\n> **bootfs**(boot file system)主要包含bootloader和kernel，bootloader主要引导加载kernel，Linux刚启动时会加载bootfs文件系统。Docker镜像的最底层就是bootfs，当boot加载完后，整个内核就在内存中了，此时内存的使用权已经由bootfs转交给内核，此时系统也会卸载bootfs\n>\n> **rootfs**，在bootfs之上，包含的就是典型Linux系统中的/dev,/proc,/bin,/etc等标准目录和文件。rootfs就是各种不同的操作系统的发行版本，如Ubuntu，Centos等\n\n#### 分层理解\n\n所有Docker镜像都起始于一个基础镜像层，当进行修改或增加心的内容时，就会在当前镜像层之上，创建新的镜像层。\n\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/A%7B208OI1%7D7_1D)3N3FNN%5BCJ.png\">\n\n特点：\n\n> Docker**镜像**默认都是**只读**的，**当容器启动时**，一个新的**可读写层**被加载到镜像的顶部！这个新的可读写层就是**容器层**，容器层之下的都叫镜像\n>\n> 即，user的所有操作都是基于**容器层**的。原来的镜像层+user自己的容器层 = user发布的新镜像\n\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/3A8618A8021E1F09C26DF1ED8994F223.png\">\n\n\n\n#### Commit镜像\n\n```\ndocker commit 提交容器成为一个新的副本\ndocker commit -m=\"提交的描述信息\" -a=\"作者\" 容器id 目标镜像名:[TAG] \n```\n\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/2%7BID%7DBTJA(MR8Y25ALI2L_3.png\">\n\n## 六、小结\n\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBnLn.png\">\n\n## 六、练习\n\n### 部署一个nginx\n\n> - docker search nginx\n>\n> - docker pull nginx\n>\n> - docker run -d --name nginx01 -p 3344:80 nginx\n>\n> - 测试：\n>\n>   > curl localhost:3344 //向localhost:3344发出GET请求\n\n### 重要：端口暴露\n\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBki8.jpg\">\n\n### 思考\n\n我们每次改动nginx配置文件，都需要进入容器内部？十分麻烦，要是可以在容器外部提供一个映射路径，达到在容器外修改文件名，容器内部就可以自动修改？ -v **容器卷**技术\n\n","slug":"Docker笔记之基础篇","published":1,"updated":"2021-12-19T07:59:20.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxo1kfkm0001dwtfbh3lgh5e","content":"<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.orphadata.org%2Fcgi-bin%2Fimg%2Fbody%2Fontologies%2Fdocker.png&refer=http%3A%2F%2Fwww.orphadata.org&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1641898195&t=63f4be05817a4cd9795000d4bb060979\" style=\"zoom:100%\">\n<h1 id=\"docker基础\"><a class=\"markdownIt-Anchor\" href=\"#docker基础\"></a> Docker基础</h1>\n<h2 id=\"一-基本组成\"><a class=\"markdownIt-Anchor\" href=\"#一-基本组成\"></a> 一、基本组成</h2>\n<img src=\"https://s4.ax1x.com/2021/12/15/Tp0WPU.png\">\n<p>**镜像：**可以通过镜像来创建容器， app镜像===&gt;run===&gt;app容器（提供服务），一个镜像可以启动多个容器（分布式集群的搭建）</p>\n<p>**容器：**Docker通过容器技术，独立运行一个或者一组应用。一个容器相当于一个简易的linux系统</p>\n<p>**仓库：**存放镜像的地方，分为公有仓库和私有仓库</p>\n<p>配置阿里云官方镜像加速器：</p>\n<ol>\n<li>\n<p><code>sudo mkdir -p /etc/docker</code></p>\n</li>\n<li>\n<p><code>sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</code></p>\n<p><code>&#123;</code></p>\n<p><code>&quot;registry-mirrors&quot;: [&quot;http://hd1esep4.mirror.aliyuncs.com&quot;]</code></p>\n<p><code>&#125;</code></p>\n<p><code>EOF</code></p>\n</li>\n<li>\n<p><code>sudo systemctl daemon-reload</code></p>\n</li>\n<li>\n<p><code>sudo systemctl restart docker</code></p>\n</li>\n</ol>\n<h2 id=\"二-docker的镜像run的流程图\"><a class=\"markdownIt-Anchor\" href=\"#二-docker的镜像run的流程图\"></a> 二、docker的镜像run的流程图</h2>\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBERg.png\">\n<h2 id=\"三-docker底层原理\"><a class=\"markdownIt-Anchor\" href=\"#三-docker底层原理\"></a> 三、Docker底层原理</h2>\n<p>Docker是一个CS结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问。DockerServer接收到DockerClient的指令就会执行这个指令</p>\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBAJS.png\">\n<h2 id=\"四-docker常用命令\"><a class=\"markdownIt-Anchor\" href=\"#四-docker常用命令\"></a> 四、Docker常用命令</h2>\n<h3 id=\"链接\"><a class=\"markdownIt-Anchor\" href=\"#链接\"></a> 链接</h3>\n<p><a href=\"https://docs.docker.com/engine/reference/commandline\">https://docs.docker.com/engine/reference/commandline</a></p>\n<hr />\n<h3 id=\"镜像命令\"><a class=\"markdownIt-Anchor\" href=\"#镜像命令\"></a> 镜像命令</h3>\n<hr />\n<p><strong>docker images</strong>：查看本地主机上的镜像</p>\n<p><strong>docker search</strong>：搜索命令</p>\n<p><strong>docker pull</strong>：下载镜像</p>\n<p><strong>docker rmi</strong>： 删除镜像</p>\n<hr />\n<h3 id=\"容器命令\"><a class=\"markdownIt-Anchor\" href=\"#容器命令\"></a> 容器命令</h3>\n<hr />\n<p><strong>docker run [可选参数] image</strong> ：新建容器并启动</p>\n<blockquote>\n<p>参数说明</p>\n<p>​\t--name=“Name” 容器名字 xx01  xx02 用来区分容器</p>\n<p>​\t--d\t\t\t     后台方式运行</p>\n<p>​\t--it\t\t\t      使用交互方式运行，进入容器查看内容</p>\n<p>​\t-p                          指定容器的端口   -p 8080：8080</p>\n<ul>\n<li>-p ip：主机端口：容器端口</li>\n<li>-p 主机端口：容器端口**（常用）**</li>\n<li>-p 容器端口</li>\n</ul>\n</blockquote>\n<p><strong>docker ps</strong>：查看运行中的容器</p>\n<blockquote>\n<p>-a 查看所有容器（正在运行和历史运行）</p>\n<p>-n=x 显示最近创建的 x个容器</p>\n<p>-q 只显示容器的编号</p>\n</blockquote>\n<p><strong>exit</strong>：停止并退出正在运行的容器</p>\n<p><strong>Ctrl+P+Q</strong>：不停止但退出正在运行的容器</p>\n<p><strong>docker rm 容器id</strong>：删除容器，正在运行的容器必须强制删除-f</p>\n<p><strong>docker start 容器id</strong>：启动容器</p>\n<p><strong>docker restart 容器id</strong>：重启容器</p>\n<p><strong>docker stop 容器id</strong>: 停止当前正在运行的容器</p>\n<p><strong>docker kill 容器id</strong>：强制停止当前容器</p>\n<p><strong>docker top 容器id</strong>：查看容器内部的进程信息</p>\n<p><strong>docker exec -it 容器id /bin/bash</strong>：进入容器后开启一个新的终端，可以在里面操作</p>\n<p><strong>docker attach 容器id</strong>：进入容器正在执行的终端，不回启动新的进程！</p>\n<p><strong>docker cp 1e3d0b0653e8:/home/test.java C:/Users/BINJ/Desktop</strong>：从容器内复制文件到本地主机</p>\n<blockquote>\n<p>拷贝（cp）是一个手动过程，使用 -v 卷的技术，可以实现自动同步， /home /home</p>\n</blockquote>\n<h2 id=\"五-docker镜像基本原理\"><a class=\"markdownIt-Anchor\" href=\"#五-docker镜像基本原理\"></a> 五、Docker镜像基本原理</h2>\n<h2 id=\"docker镜像详解\"><a class=\"markdownIt-Anchor\" href=\"#docker镜像详解\"></a> Docker镜像详解</h2>\n<h2 id=\"镜像概述\"><a class=\"markdownIt-Anchor\" href=\"#镜像概述\"></a> 镜像概述</h2>\n<ol>\n<li>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，包含运行某个软件所需的所有内容，包括：代码、运行时、库、环境变量和配置文件</li>\n<li>所有应用，直接打包docker镜像，就可以直接跑起来</li>\n<li>获取方式：\n<ol>\n<li>从远程仓库下载</li>\n<li>别人拷贝给你</li>\n<li>自己制作一个镜像DockerFile</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"docker镜像加载原理\"><a class=\"markdownIt-Anchor\" href=\"#docker镜像加载原理\"></a> Docker镜像加载原理</h2>\n<h4 id=\"unionfs联合文件系统\"><a class=\"markdownIt-Anchor\" href=\"#unionfs联合文件系统\"></a> UnionFS（联合文件系统）</h4>\n<blockquote>\n<p>UnionFS是一种分层、轻量级并且高性能的文件系统，支持对文件系统的修改作为一次提交来一层层叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。</p>\n<p>UnionFS是Docker镜像的基础，镜像可以通过分层来进行继承，基于基础镜像（父镜像）可以制作各种具体的应用镜像</p>\n<p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p>\n</blockquote>\n<h4 id=\"加载原理\"><a class=\"markdownIt-Anchor\" href=\"#加载原理\"></a> 加载原理</h4>\n<blockquote>\n<p>docker的镜像实际上就是由一层层的文件系统构成的，这种层级的文件系统就是UnionFS</p>\n<p><strong>bootfs</strong>(boot file system)主要包含bootloader和kernel，bootloader主要引导加载kernel，Linux刚启动时会加载bootfs文件系统。Docker镜像的最底层就是bootfs，当boot加载完后，整个内核就在内存中了，此时内存的使用权已经由bootfs转交给内核，此时系统也会卸载bootfs</p>\n<p><strong>rootfs</strong>，在bootfs之上，包含的就是典型Linux系统中的/dev,/proc,/bin,/etc等标准目录和文件。rootfs就是各种不同的操作系统的发行版本，如Ubuntu，Centos等</p>\n</blockquote>\n<h4 id=\"分层理解\"><a class=\"markdownIt-Anchor\" href=\"#分层理解\"></a> 分层理解</h4>\n<p>所有Docker镜像都起始于一个基础镜像层，当进行修改或增加心的内容时，就会在当前镜像层之上，创建新的镜像层。</p>\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/A%7B208OI1%7D7_1D)3N3FNN%5BCJ.png\">\n<p>特点：</p>\n<blockquote>\n<p>Docker<strong>镜像</strong>默认都是<strong>只读</strong>的，<strong>当容器启动时</strong>，一个新的<strong>可读写层</strong>被加载到镜像的顶部！这个新的可读写层就是<strong>容器层</strong>，容器层之下的都叫镜像</p>\n<p>即，user的所有操作都是基于<strong>容器层</strong>的。原来的镜像层+user自己的容器层 = user发布的新镜像</p>\n</blockquote>\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/3A8618A8021E1F09C26DF1ED8994F223.png\">\n<h4 id=\"commit镜像\"><a class=\"markdownIt-Anchor\" href=\"#commit镜像\"></a> Commit镜像</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit 提交容器成为一个新的副本</span><br><span class=\"line\">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG] </span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/2%7BID%7DBTJA(MR8Y25ALI2L_3.png\">\n<h2 id=\"六-小结\"><a class=\"markdownIt-Anchor\" href=\"#六-小结\"></a> 六、小结</h2>\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBnLn.png\">\n<h2 id=\"六-练习\"><a class=\"markdownIt-Anchor\" href=\"#六-练习\"></a> 六、练习</h2>\n<h3 id=\"部署一个nginx\"><a class=\"markdownIt-Anchor\" href=\"#部署一个nginx\"></a> 部署一个nginx</h3>\n<blockquote>\n<ul>\n<li>\n<p>docker search nginx</p>\n</li>\n<li>\n<p>docker pull nginx</p>\n</li>\n<li>\n<p>docker run -d --name nginx01 -p 3344:80 nginx</p>\n</li>\n<li>\n<p>测试：</p>\n<blockquote>\n<p>curl localhost:3344 //向localhost:3344发出GET请求</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"重要端口暴露\"><a class=\"markdownIt-Anchor\" href=\"#重要端口暴露\"></a> 重要：端口暴露</h3>\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBki8.jpg\">\n<h3 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\"></a> 思考</h3>\n<p>我们每次改动nginx配置文件，都需要进入容器内部？十分麻烦，要是可以在容器外部提供一个映射路径，达到在容器外修改文件名，容器内部就可以自动修改？ -v <strong>容器卷</strong>技术</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.orphadata.org%2Fcgi-bin%2Fimg%2Fbody%2Fontologies%2Fdocker.png&refer=http%3A%2F%2Fwww.orphadata.org&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1641898195&t=63f4be05817a4cd9795000d4bb060979\" style=\"zoom:100%\">\n<h1 id=\"docker基础\"><a class=\"markdownIt-Anchor\" href=\"#docker基础\"></a> Docker基础</h1>\n<h2 id=\"一-基本组成\"><a class=\"markdownIt-Anchor\" href=\"#一-基本组成\"></a> 一、基本组成</h2>\n<img src=\"https://s4.ax1x.com/2021/12/15/Tp0WPU.png\">\n<p>**镜像：**可以通过镜像来创建容器， app镜像===&gt;run===&gt;app容器（提供服务），一个镜像可以启动多个容器（分布式集群的搭建）</p>\n<p>**容器：**Docker通过容器技术，独立运行一个或者一组应用。一个容器相当于一个简易的linux系统</p>\n<p>**仓库：**存放镜像的地方，分为公有仓库和私有仓库</p>\n<p>配置阿里云官方镜像加速器：</p>\n<ol>\n<li>\n<p><code>sudo mkdir -p /etc/docker</code></p>\n</li>\n<li>\n<p><code>sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</code></p>\n<p><code>&#123;</code></p>\n<p><code>&quot;registry-mirrors&quot;: [&quot;http://hd1esep4.mirror.aliyuncs.com&quot;]</code></p>\n<p><code>&#125;</code></p>\n<p><code>EOF</code></p>\n</li>\n<li>\n<p><code>sudo systemctl daemon-reload</code></p>\n</li>\n<li>\n<p><code>sudo systemctl restart docker</code></p>\n</li>\n</ol>\n<h2 id=\"二-docker的镜像run的流程图\"><a class=\"markdownIt-Anchor\" href=\"#二-docker的镜像run的流程图\"></a> 二、docker的镜像run的流程图</h2>\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBERg.png\">\n<h2 id=\"三-docker底层原理\"><a class=\"markdownIt-Anchor\" href=\"#三-docker底层原理\"></a> 三、Docker底层原理</h2>\n<p>Docker是一个CS结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问。DockerServer接收到DockerClient的指令就会执行这个指令</p>\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBAJS.png\">\n<h2 id=\"四-docker常用命令\"><a class=\"markdownIt-Anchor\" href=\"#四-docker常用命令\"></a> 四、Docker常用命令</h2>\n<h3 id=\"链接\"><a class=\"markdownIt-Anchor\" href=\"#链接\"></a> 链接</h3>\n<p><a href=\"https://docs.docker.com/engine/reference/commandline\">https://docs.docker.com/engine/reference/commandline</a></p>\n<hr />\n<h3 id=\"镜像命令\"><a class=\"markdownIt-Anchor\" href=\"#镜像命令\"></a> 镜像命令</h3>\n<hr />\n<p><strong>docker images</strong>：查看本地主机上的镜像</p>\n<p><strong>docker search</strong>：搜索命令</p>\n<p><strong>docker pull</strong>：下载镜像</p>\n<p><strong>docker rmi</strong>： 删除镜像</p>\n<hr />\n<h3 id=\"容器命令\"><a class=\"markdownIt-Anchor\" href=\"#容器命令\"></a> 容器命令</h3>\n<hr />\n<p><strong>docker run [可选参数] image</strong> ：新建容器并启动</p>\n<blockquote>\n<p>参数说明</p>\n<p>​\t--name=“Name” 容器名字 xx01  xx02 用来区分容器</p>\n<p>​\t--d\t\t\t     后台方式运行</p>\n<p>​\t--it\t\t\t      使用交互方式运行，进入容器查看内容</p>\n<p>​\t-p                          指定容器的端口   -p 8080：8080</p>\n<ul>\n<li>-p ip：主机端口：容器端口</li>\n<li>-p 主机端口：容器端口**（常用）**</li>\n<li>-p 容器端口</li>\n</ul>\n</blockquote>\n<p><strong>docker ps</strong>：查看运行中的容器</p>\n<blockquote>\n<p>-a 查看所有容器（正在运行和历史运行）</p>\n<p>-n=x 显示最近创建的 x个容器</p>\n<p>-q 只显示容器的编号</p>\n</blockquote>\n<p><strong>exit</strong>：停止并退出正在运行的容器</p>\n<p><strong>Ctrl+P+Q</strong>：不停止但退出正在运行的容器</p>\n<p><strong>docker rm 容器id</strong>：删除容器，正在运行的容器必须强制删除-f</p>\n<p><strong>docker start 容器id</strong>：启动容器</p>\n<p><strong>docker restart 容器id</strong>：重启容器</p>\n<p><strong>docker stop 容器id</strong>: 停止当前正在运行的容器</p>\n<p><strong>docker kill 容器id</strong>：强制停止当前容器</p>\n<p><strong>docker top 容器id</strong>：查看容器内部的进程信息</p>\n<p><strong>docker exec -it 容器id /bin/bash</strong>：进入容器后开启一个新的终端，可以在里面操作</p>\n<p><strong>docker attach 容器id</strong>：进入容器正在执行的终端，不回启动新的进程！</p>\n<p><strong>docker cp 1e3d0b0653e8:/home/test.java C:/Users/BINJ/Desktop</strong>：从容器内复制文件到本地主机</p>\n<blockquote>\n<p>拷贝（cp）是一个手动过程，使用 -v 卷的技术，可以实现自动同步， /home /home</p>\n</blockquote>\n<h2 id=\"五-docker镜像基本原理\"><a class=\"markdownIt-Anchor\" href=\"#五-docker镜像基本原理\"></a> 五、Docker镜像基本原理</h2>\n<h2 id=\"docker镜像详解\"><a class=\"markdownIt-Anchor\" href=\"#docker镜像详解\"></a> Docker镜像详解</h2>\n<h2 id=\"镜像概述\"><a class=\"markdownIt-Anchor\" href=\"#镜像概述\"></a> 镜像概述</h2>\n<ol>\n<li>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，包含运行某个软件所需的所有内容，包括：代码、运行时、库、环境变量和配置文件</li>\n<li>所有应用，直接打包docker镜像，就可以直接跑起来</li>\n<li>获取方式：\n<ol>\n<li>从远程仓库下载</li>\n<li>别人拷贝给你</li>\n<li>自己制作一个镜像DockerFile</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"docker镜像加载原理\"><a class=\"markdownIt-Anchor\" href=\"#docker镜像加载原理\"></a> Docker镜像加载原理</h2>\n<h4 id=\"unionfs联合文件系统\"><a class=\"markdownIt-Anchor\" href=\"#unionfs联合文件系统\"></a> UnionFS（联合文件系统）</h4>\n<blockquote>\n<p>UnionFS是一种分层、轻量级并且高性能的文件系统，支持对文件系统的修改作为一次提交来一层层叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。</p>\n<p>UnionFS是Docker镜像的基础，镜像可以通过分层来进行继承，基于基础镜像（父镜像）可以制作各种具体的应用镜像</p>\n<p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p>\n</blockquote>\n<h4 id=\"加载原理\"><a class=\"markdownIt-Anchor\" href=\"#加载原理\"></a> 加载原理</h4>\n<blockquote>\n<p>docker的镜像实际上就是由一层层的文件系统构成的，这种层级的文件系统就是UnionFS</p>\n<p><strong>bootfs</strong>(boot file system)主要包含bootloader和kernel，bootloader主要引导加载kernel，Linux刚启动时会加载bootfs文件系统。Docker镜像的最底层就是bootfs，当boot加载完后，整个内核就在内存中了，此时内存的使用权已经由bootfs转交给内核，此时系统也会卸载bootfs</p>\n<p><strong>rootfs</strong>，在bootfs之上，包含的就是典型Linux系统中的/dev,/proc,/bin,/etc等标准目录和文件。rootfs就是各种不同的操作系统的发行版本，如Ubuntu，Centos等</p>\n</blockquote>\n<h4 id=\"分层理解\"><a class=\"markdownIt-Anchor\" href=\"#分层理解\"></a> 分层理解</h4>\n<p>所有Docker镜像都起始于一个基础镜像层，当进行修改或增加心的内容时，就会在当前镜像层之上，创建新的镜像层。</p>\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/A%7B208OI1%7D7_1D)3N3FNN%5BCJ.png\">\n<p>特点：</p>\n<blockquote>\n<p>Docker<strong>镜像</strong>默认都是<strong>只读</strong>的，<strong>当容器启动时</strong>，一个新的<strong>可读写层</strong>被加载到镜像的顶部！这个新的可读写层就是<strong>容器层</strong>，容器层之下的都叫镜像</p>\n<p>即，user的所有操作都是基于<strong>容器层</strong>的。原来的镜像层+user自己的容器层 = user发布的新镜像</p>\n</blockquote>\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/3A8618A8021E1F09C26DF1ED8994F223.png\">\n<h4 id=\"commit镜像\"><a class=\"markdownIt-Anchor\" href=\"#commit镜像\"></a> Commit镜像</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit 提交容器成为一个新的副本</span><br><span class=\"line\">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG] </span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/2%7BID%7DBTJA(MR8Y25ALI2L_3.png\">\n<h2 id=\"六-小结\"><a class=\"markdownIt-Anchor\" href=\"#六-小结\"></a> 六、小结</h2>\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBnLn.png\">\n<h2 id=\"六-练习\"><a class=\"markdownIt-Anchor\" href=\"#六-练习\"></a> 六、练习</h2>\n<h3 id=\"部署一个nginx\"><a class=\"markdownIt-Anchor\" href=\"#部署一个nginx\"></a> 部署一个nginx</h3>\n<blockquote>\n<ul>\n<li>\n<p>docker search nginx</p>\n</li>\n<li>\n<p>docker pull nginx</p>\n</li>\n<li>\n<p>docker run -d --name nginx01 -p 3344:80 nginx</p>\n</li>\n<li>\n<p>测试：</p>\n<blockquote>\n<p>curl localhost:3344 //向localhost:3344发出GET请求</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"重要端口暴露\"><a class=\"markdownIt-Anchor\" href=\"#重要端口暴露\"></a> 重要：端口暴露</h3>\n<img src=\"https://s4.ax1x.com/2021/12/15/TpBki8.jpg\">\n<h3 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\"></a> 思考</h3>\n<p>我们每次改动nginx配置文件，都需要进入容器内部？十分麻烦，要是可以在容器外部提供一个映射路径，达到在容器外修改文件名，容器内部就可以自动修改？ -v <strong>容器卷</strong>技术</p>\n"},{"title":"Docker进阶","date":"2021-12-20T01:41:13.000Z","mathjax":true,"_content":"\n# Docker进阶\n\n## 一、Docker容器卷\n\n容器运行时，数据都在容器中，如果容器被删除，那么数据就会丢失。由此，产生出需求：**数据持久化**。\n\n为了满足这个需求，容器之间需要有一个**数据共享**技术。即，Docker容器中产生的数据，可以同步到本地。\n\n卷技术：将容器内的目录，挂载到Linux上。\n\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E4%BA%A4%E4%BA%922.png\" width=\"500px\">\n\n> 容器卷技术：容器的持久化和同步操作！容器间也是可以数据共享的！\n\n### 1. 使用数据卷\n\n> 方式一：直接使用命令来挂载 -v\n\n```\ndocker run -it -v 主机目录:容器内的目录\n# 启动起来后可以使用 docker inspect 容器id 来查看挂载详情\n```\n\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/UO_ZG0%60K9$WOG0V_HP%7BPF4U.png\">\n\n### 2. 实战：MYSQL\n\n```cmd\ndocker run -d -p 3310:3306 -v C:/Users/BINJ/Desktop/电网/ceshi/mysql/conf:/etc/mysql/conf.d -v C:/Users/BINJ/Desktop/电网/ceshi/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7\n```\n\n### 3. 匿名和具名挂载\n\n所有docker容器内的卷，没有指定目录的情况下都在 `/var/lib/docker/volumes/xxxxx(具名)/_data` \n\n具体的路径可以使用命令`docker volumn inspect xxxxx`查看\n\n```\n# 区分具名和匿名\n-v 容器内路径    #匿名挂载\n-v 卷名：容器内路径  #具名挂载\n-v 宿主机路径：容器内路径   #具体路径挂载\n```\n\n\n\n## 二、Dockerfile\n\nDockerfile就是用来构建docker镜像的构建文件！命令脚本！\n\n```\n# 创建一个dockerfile文件，名字建议 Dockerfile\n# 文件中的内容： 指定（大写） 参数\nFROM centos\n\nVOLUME [\"volume01\",\"volume02\"]\n\nCMD echo \"------end------\"\n\nCMD /bin/bash\n\n# 这里的每个命令就是镜像的一层\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Docker进阶.md","raw":"---\ntitle: Docker进阶\ndate: 2021-12-20 09:41:13\ntags: Docker\nmathjax: true\n---\n\n# Docker进阶\n\n## 一、Docker容器卷\n\n容器运行时，数据都在容器中，如果容器被删除，那么数据就会丢失。由此，产生出需求：**数据持久化**。\n\n为了满足这个需求，容器之间需要有一个**数据共享**技术。即，Docker容器中产生的数据，可以同步到本地。\n\n卷技术：将容器内的目录，挂载到Linux上。\n\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E4%BA%A4%E4%BA%922.png\" width=\"500px\">\n\n> 容器卷技术：容器的持久化和同步操作！容器间也是可以数据共享的！\n\n### 1. 使用数据卷\n\n> 方式一：直接使用命令来挂载 -v\n\n```\ndocker run -it -v 主机目录:容器内的目录\n# 启动起来后可以使用 docker inspect 容器id 来查看挂载详情\n```\n\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/UO_ZG0%60K9$WOG0V_HP%7BPF4U.png\">\n\n### 2. 实战：MYSQL\n\n```cmd\ndocker run -d -p 3310:3306 -v C:/Users/BINJ/Desktop/电网/ceshi/mysql/conf:/etc/mysql/conf.d -v C:/Users/BINJ/Desktop/电网/ceshi/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7\n```\n\n### 3. 匿名和具名挂载\n\n所有docker容器内的卷，没有指定目录的情况下都在 `/var/lib/docker/volumes/xxxxx(具名)/_data` \n\n具体的路径可以使用命令`docker volumn inspect xxxxx`查看\n\n```\n# 区分具名和匿名\n-v 容器内路径    #匿名挂载\n-v 卷名：容器内路径  #具名挂载\n-v 宿主机路径：容器内路径   #具体路径挂载\n```\n\n\n\n## 二、Dockerfile\n\nDockerfile就是用来构建docker镜像的构建文件！命令脚本！\n\n```\n# 创建一个dockerfile文件，名字建议 Dockerfile\n# 文件中的内容： 指定（大写） 参数\nFROM centos\n\nVOLUME [\"volume01\",\"volume02\"]\n\nCMD echo \"------end------\"\n\nCMD /bin/bash\n\n# 这里的每个命令就是镜像的一层\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Docker进阶","published":1,"updated":"2021-12-20T01:41:57.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxo1kfks0003dwtfcx2l4ryd","content":"<h1 id=\"docker进阶\"><a class=\"markdownIt-Anchor\" href=\"#docker进阶\"></a> Docker进阶</h1>\n<h2 id=\"一-docker容器卷\"><a class=\"markdownIt-Anchor\" href=\"#一-docker容器卷\"></a> 一、Docker容器卷</h2>\n<p>容器运行时，数据都在容器中，如果容器被删除，那么数据就会丢失。由此，产生出需求：<strong>数据持久化</strong>。</p>\n<p>为了满足这个需求，容器之间需要有一个<strong>数据共享</strong>技术。即，Docker容器中产生的数据，可以同步到本地。</p>\n<p>卷技术：将容器内的目录，挂载到Linux上。</p>\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E4%BA%A4%E4%BA%922.png\" width=\"500px\">\n<blockquote>\n<p>容器卷技术：容器的持久化和同步操作！容器间也是可以数据共享的！</p>\n</blockquote>\n<h3 id=\"1-使用数据卷\"><a class=\"markdownIt-Anchor\" href=\"#1-使用数据卷\"></a> 1. 使用数据卷</h3>\n<blockquote>\n<p>方式一：直接使用命令来挂载 -v</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v 主机目录:容器内的目录</span><br><span class=\"line\"># 启动起来后可以使用 docker inspect 容器id 来查看挂载详情</span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/UO_ZG0%60K9$WOG0V_HP%7BPF4U.png\">\n<h3 id=\"2-实战mysql\"><a class=\"markdownIt-Anchor\" href=\"#2-实战mysql\"></a> 2. 实战：MYSQL</h3>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p <span class=\"number\">3310</span>:<span class=\"number\">3306</span> -v C:/Users/BINJ/Desktop/电网/ceshi/mysql/conf:/etc/mysql/conf.d -v C:/Users/BINJ/Desktop/电网/ceshi/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=<span class=\"number\">123456</span> --name mysql01 mysql:<span class=\"number\">5</span>.<span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-匿名和具名挂载\"><a class=\"markdownIt-Anchor\" href=\"#3-匿名和具名挂载\"></a> 3. 匿名和具名挂载</h3>\n<p>所有docker容器内的卷，没有指定目录的情况下都在 <code>/var/lib/docker/volumes/xxxxx(具名)/_data</code></p>\n<p>具体的路径可以使用命令<code>docker volumn inspect xxxxx</code>查看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 区分具名和匿名</span><br><span class=\"line\">-v 容器内路径    #匿名挂载</span><br><span class=\"line\">-v 卷名：容器内路径  #具名挂载</span><br><span class=\"line\">-v 宿主机路径：容器内路径   #具体路径挂载</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#二-dockerfile\"></a> 二、Dockerfile</h2>\n<p>Dockerfile就是用来构建docker镜像的构建文件！命令脚本！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建一个dockerfile文件，名字建议 Dockerfile</span><br><span class=\"line\"># 文件中的内容： 指定（大写） 参数</span><br><span class=\"line\">FROM centos</span><br><span class=\"line\"></span><br><span class=\"line\">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">CMD echo &quot;------end------&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">CMD /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># 这里的每个命令就是镜像的一层</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker进阶\"><a class=\"markdownIt-Anchor\" href=\"#docker进阶\"></a> Docker进阶</h1>\n<h2 id=\"一-docker容器卷\"><a class=\"markdownIt-Anchor\" href=\"#一-docker容器卷\"></a> 一、Docker容器卷</h2>\n<p>容器运行时，数据都在容器中，如果容器被删除，那么数据就会丢失。由此，产生出需求：<strong>数据持久化</strong>。</p>\n<p>为了满足这个需求，容器之间需要有一个<strong>数据共享</strong>技术。即，Docker容器中产生的数据，可以同步到本地。</p>\n<p>卷技术：将容器内的目录，挂载到Linux上。</p>\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E4%BA%A4%E4%BA%922.png\" width=\"500px\">\n<blockquote>\n<p>容器卷技术：容器的持久化和同步操作！容器间也是可以数据共享的！</p>\n</blockquote>\n<h3 id=\"1-使用数据卷\"><a class=\"markdownIt-Anchor\" href=\"#1-使用数据卷\"></a> 1. 使用数据卷</h3>\n<blockquote>\n<p>方式一：直接使用命令来挂载 -v</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v 主机目录:容器内的目录</span><br><span class=\"line\"># 启动起来后可以使用 docker inspect 容器id 来查看挂载详情</span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/UO_ZG0%60K9$WOG0V_HP%7BPF4U.png\">\n<h3 id=\"2-实战mysql\"><a class=\"markdownIt-Anchor\" href=\"#2-实战mysql\"></a> 2. 实战：MYSQL</h3>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p <span class=\"number\">3310</span>:<span class=\"number\">3306</span> -v C:/Users/BINJ/Desktop/电网/ceshi/mysql/conf:/etc/mysql/conf.d -v C:/Users/BINJ/Desktop/电网/ceshi/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=<span class=\"number\">123456</span> --name mysql01 mysql:<span class=\"number\">5</span>.<span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-匿名和具名挂载\"><a class=\"markdownIt-Anchor\" href=\"#3-匿名和具名挂载\"></a> 3. 匿名和具名挂载</h3>\n<p>所有docker容器内的卷，没有指定目录的情况下都在 <code>/var/lib/docker/volumes/xxxxx(具名)/_data</code></p>\n<p>具体的路径可以使用命令<code>docker volumn inspect xxxxx</code>查看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 区分具名和匿名</span><br><span class=\"line\">-v 容器内路径    #匿名挂载</span><br><span class=\"line\">-v 卷名：容器内路径  #具名挂载</span><br><span class=\"line\">-v 宿主机路径：容器内路径   #具体路径挂载</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#二-dockerfile\"></a> 二、Dockerfile</h2>\n<p>Dockerfile就是用来构建docker镜像的构建文件！命令脚本！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建一个dockerfile文件，名字建议 Dockerfile</span><br><span class=\"line\"># 文件中的内容： 指定（大写） 参数</span><br><span class=\"line\">FROM centos</span><br><span class=\"line\"></span><br><span class=\"line\">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">CMD echo &quot;------end------&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">CMD /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># 这里的每个命令就是镜像的一层</span><br></pre></td></tr></table></figure>\n"},{"title":"docker ports端口禁用","date":"2021-12-25T05:58:10.000Z","_content":"\n# Docker 暴露的端口被禁用\n\n## 报错：\n\n在使用Docker部署Mosquitto服务器时，报错如下：\n\n```docker: Error response from daemon: Ports are not available: listen tcp 0.0.0.0:10001: bind: An attempt was made to access a socket in a way forbidden by its access permissions.```\n\n即，10001端口不让用\n\n## 解决：\n\n使用如下命令查看哪些端口不让用\n\n```\nnetsh interface ipv4 show excludedportrange protocol=tcp\n```\n\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/FC6%5DBBQ~M72JH3(Q$KU%5D$F5.png\">\n\n换个不在上述列表中的端口即可\n\n## 参考\n\nhttps://www.cnblogs.com/jasongrass/p/13726009.html\n\n","source":"_posts/docker-ports端口禁用.md","raw":"---\ntitle: docker ports端口禁用\ndate: 2021-12-25 13:58:10\ntags: docker 工具问题集\n\n---\n\n# Docker 暴露的端口被禁用\n\n## 报错：\n\n在使用Docker部署Mosquitto服务器时，报错如下：\n\n```docker: Error response from daemon: Ports are not available: listen tcp 0.0.0.0:10001: bind: An attempt was made to access a socket in a way forbidden by its access permissions.```\n\n即，10001端口不让用\n\n## 解决：\n\n使用如下命令查看哪些端口不让用\n\n```\nnetsh interface ipv4 show excludedportrange protocol=tcp\n```\n\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/FC6%5DBBQ~M72JH3(Q$KU%5D$F5.png\">\n\n换个不在上述列表中的端口即可\n\n## 参考\n\nhttps://www.cnblogs.com/jasongrass/p/13726009.html\n\n","slug":"docker-ports端口禁用","published":1,"updated":"2021-12-25T06:05:03.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxo1kfku0004dwtf6u3m3wvj","content":"<h1 id=\"docker-暴露的端口被禁用\"><a class=\"markdownIt-Anchor\" href=\"#docker-暴露的端口被禁用\"></a> Docker 暴露的端口被禁用</h1>\n<h2 id=\"报错\"><a class=\"markdownIt-Anchor\" href=\"#报错\"></a> 报错：</h2>\n<p>在使用Docker部署Mosquitto服务器时，报错如下：</p>\n<p><code>docker: Error response from daemon: Ports are not available: listen tcp 0.0.0.0:10001: bind: An attempt was made to access a socket in a way forbidden by its access permissions.</code></p>\n<p>即，10001端口不让用</p>\n<h2 id=\"解决\"><a class=\"markdownIt-Anchor\" href=\"#解决\"></a> 解决：</h2>\n<p>使用如下命令查看哪些端口不让用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netsh interface ipv4 show excludedportrange protocol=tcp</span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/FC6%5DBBQ~M72JH3(Q$KU%5D$F5.png\">\n<p>换个不在上述列表中的端口即可</p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<p><a href=\"https://www.cnblogs.com/jasongrass/p/13726009.html\">https://www.cnblogs.com/jasongrass/p/13726009.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker-暴露的端口被禁用\"><a class=\"markdownIt-Anchor\" href=\"#docker-暴露的端口被禁用\"></a> Docker 暴露的端口被禁用</h1>\n<h2 id=\"报错\"><a class=\"markdownIt-Anchor\" href=\"#报错\"></a> 报错：</h2>\n<p>在使用Docker部署Mosquitto服务器时，报错如下：</p>\n<p><code>docker: Error response from daemon: Ports are not available: listen tcp 0.0.0.0:10001: bind: An attempt was made to access a socket in a way forbidden by its access permissions.</code></p>\n<p>即，10001端口不让用</p>\n<h2 id=\"解决\"><a class=\"markdownIt-Anchor\" href=\"#解决\"></a> 解决：</h2>\n<p>使用如下命令查看哪些端口不让用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netsh interface ipv4 show excludedportrange protocol=tcp</span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/binProg/my-pic-cdn/raw/master/hexo_imgs/FC6%5DBBQ~M72JH3(Q$KU%5D$F5.png\">\n<p>换个不在上述列表中的端口即可</p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<p><a href=\"https://www.cnblogs.com/jasongrass/p/13726009.html\">https://www.cnblogs.com/jasongrass/p/13726009.html</a></p>\n"},{"title":"Numpy学习笔记","date":"2021-12-27T02:06:58.000Z","mathjax":true,"_content":"\n\n\n# Numpy学习笔记\n\n## 1. 生成Numpy数组\n\n### 1.1 从已有数据中创建数组\n\n- 将列表转换成ndarray\n\n```python\nimport numpy as np\nlst1 = [3.14, 2.17, 1, 2, 3]\nnd1 = np.array(lst1)\nprint(nd1)\nprint(type(nd1))\n```\n\n```\n[3.14 2.17 1.   2.   3.  ]\n<class 'numpy.ndarray'>\n```\n\n- 嵌套列表可以转换为多维ndarray\n\n```python\nlst2 = [lst1,[1,2,3,4,5]]\nnd2 = np.array(lst2)\nprint(nd2)\nprint(type(nd2))\n```\n\n```\n[[3.14 2.17 1.   2.   3.  ]\n [1.   2.   3.   4.   5.  ]]\n<class 'numpy.ndarray'>\n```\n\n将上面列表转换为元组同样适用\n\n### 1.2 利用random模块生成数据\n\n> 在深度学习中，我们经常需要对一些参数进行初始化，因此为了更有效地训练模型，提高模型的性能，有些初始化还需要满足一定的条件，比如满足正态分布或者均匀分布等\n\n- np.random.random: 生成0到1之间的随机数\n- np.random.uniform: 生成均匀分布的随机数\n- np.random.randn: 生成标准正太的随机数\n- np.random.randint: 生成随机的整数\n- np.random.normal: 生成正太分布\n- np.random.shuffle: 随机打乱顺序\n- np.random.seed: 设置随机种子数\n- random_sample: 生成随机的浮点数\n\n```python\nnd3 = np.random.random([3,3])\nprint(nd3)\n```\n\n```\n[[0.31219192 0.28280657 0.69562286]\n [0.29565657 0.06571726 0.89714922]\n [0.22436833 0.03590968 0.86430496]]\n```\n\n```python\nprint(\"nd3的形状为：\",nd3.shape)\n>>> nd3的形状为： (3, 3)\n```\n\n为了每次生成同一份数据，可以指定一个随机种子，使用shuffle函数打乱生成的随机数\n\n```python\nnp.random.seed(123)\nnd4 = np.random.randn(2,3)\nprint(nd4)\nnp.random.shuffle(nd4)\nprint(\"随机打乱后数据:\")\nprint(nd4)\nprint(type(nd4))\n```\n\n```\n[[-1.0856306   0.99734545  0.2829785 ]\n [-1.50629471 -0.57860025  1.65143654]]\n随机打乱后数据:\n[[-1.50629471 -0.57860025  1.65143654]\n [-1.0856306   0.99734545  0.2829785 ]]\n<class 'numpy.ndarray'>\n```\n\n### 1.3 创建特定形状的一维数组\n\n> 参数初始化时，有时需要生成一些特殊的矩阵，如全是0或全是1的数组或矩阵，这时，可以利用`np.zeros`，`np.ones`,`np.diag`来实现\n\n![IMG_0360.PNG](attachment:IMG_0360.PNG)\n\n```python\n# 生成全是0的3*3的矩阵\nnd5 = np.zeros([3,3])\n# 生成nd5形状一样的全是0的矩阵\nnd6 = np.zeros_like(nd5)\n# 生成全是1的3*3的矩阵\nnd7 = np.ones([3,3])\n# 生成3阶单位矩阵\nnd8 = np.eye(3)\n# 生成3阶对角矩阵\nnd9 = np.diag([1,2,3])\n```\n\n```python\nprint(nd5)\nprint(nd6)\nprint(nd7)\nprint(nd8)\nprint(nd9)\n```\n\n```\n[[0. 0. 0.]\n [0. 0. 0.]\n [0. 0. 0.]]\n[[0. 0. 0.]\n [0. 0. 0.]\n [0. 0. 0.]]\n[[1. 1. 1.]\n [1. 1. 1.]\n [1. 1. 1.]]\n[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n[[1 0 0]\n [0 2 0]\n [0 0 3]]\n```\n\n有时，需要把生成的矩阵暂时保存起来以备后续使用\n\n```python\nnd10 = np.random.random([5,5])\nnp.savetxt(X=nd10,fname=\"./test1.txt\")\nnd11 = np.loadtxt('./test1.txt')\nprint(nd11)\n```\n\n```\n[[0.41092437 0.5796943  0.13995076 0.40101756 0.62731701]\n [0.32415089 0.24475928 0.69475518 0.5939024  0.63179202]\n [0.44025718 0.08372648 0.71233018 0.42786349 0.2977805 ]\n [0.49208478 0.74029639 0.35772892 0.41720995 0.65472131]\n [0.37380143 0.23451288 0.98799529 0.76599595 0.77700444]]\n```\n\n### 1.4 利用arange/linspace函数生成数组\n\n```python\nprint(np.arange(10)) # start=0, stop=10, step=1\n```\n\n```\n[0 1 2 3 4 5 6 7 8 9]\n```\n\n\n\n```python\nprint(np.arange(0,10))\n```\n\n```\n[0 1 2 3 4 5 6 7 8 9]\n```\n\n\n\n```python\nprint(np.arange(1,4,0.5))\n```\n\n```\n[1.  1.5 2.  2.5 3.  3.5]\n```\n\n\n\n```python\nprint(np.arange(9,-1,-1))\n```\n\n```\n[9 8 7 6 5 4 3 2 1 0]\n```\n\nlinspace可以根据输入的指定数据范围以及等分数量，自动生成一个线性等分向量\n\n```python\nprint(np.linspace(0,1,10)) # 步长=(1-0)/9\n```\n\n```\n[0.         0.11111111 0.22222222 0.33333333 0.44444444 0.55555556\n 0.66666667 0.77777778 0.88888889 1.        ]\n```\n\n\n\n```python\nprint(np.linspace(0.1,1,10))\n```\n\n```\n[0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]\n```\n\n\n\n```python\nprint(np.logspace(0,1,10))\n```\n\n```\n[ 1.          1.29154967  1.66810054  2.15443469  2.7825594   3.59381366\n  4.64158883  5.9948425   7.74263683 10.        ]\n```\n\n## 2. 获取元素\n\n```python\nimport numpy as np\nnp.random.seed(2019)\nnd12 = np.random.random([10])\nprint(\">>>ndarray: \\n\",nd12)\n# 获取指定位置的数据，获取第4个元素\nprint(\"\\n>>>第4个元素: \\n\",nd12[3])\n# 截取一段数据\nprint(\"\\n>>>第4到第6个元素：\",nd12[3:6])\nprint(\"\\n>>>截取固定间隔的数据：\\n\",nd12[1:6:2])\nprint(\"\\n>>>倒序取数: \\n\",nd12[::-2])\nprint(\"\\n>>>截取一个多维数组的一个区域内的数据：\")\nnd13 = np.arange(25).reshape([5,5])\nprint(nd13[1:3,1:3])\nprint(\"\\n>>>截取一个多维数组中，数值在一个值域之内的数据：\")\nprint(nd13[(nd13>3)&(nd13<10)])\nprint(\"\\n>>>截取多维数组中，指定的列，如读取第2，3列：\")\nprint(nd13[:,1:3])\n```\n\n```\n>>>ndarray: \n [0.90348221 0.39308051 0.62396996 0.6378774  0.88049907 0.29917202\n 0.70219827 0.90320616 0.88138193 0.4057498 ]\n\n>>>第4个元素: \n 0.6378774010222266\n\n>>>第4到第6个元素： [0.6378774  0.88049907 0.29917202]\n\n>>>截取固定间隔的数据：\n [0.39308051 0.6378774  0.29917202]\n\n>>>倒序取数: \n [0.4057498  0.90320616 0.29917202 0.6378774  0.39308051]\n\n>>>截取一个多维数组的一个区域内的数据：\n[[ 6  7]\n [11 12]]\n\n>>>截取一个多维数组中，数值在一个值域之内的数据：\n[4 5 6 7 8 9]\n\n>>>截取多维数组中，指定的列，如读取第2，3列：\n[[ 1  2]\n [ 6  7]\n [11 12]\n [16 17]\n [21 22]]\n\n```\n\n> 获取ndarray中的部分元素，除了通过指定的索引标签来实现外，还可以通过使用一些函数来实现，如通过`random.choice`函数从指定的样本中随机抽取数据\n\n```python\nimport numpy as np\nfrom numpy import random as nr\na = np.arange(1,25,dtype=float)\nprint(\">>> a: \\n\",a)\nc1 = nr.choice(a, size=(3,4)) #size指定输出数组形状\nc2 = nr.choice(a, size=(3,4), replace=False) # replace默认为Ture，即可重复抽取\nc3 = nr.choice(a, size=(3,4), p=a/np.sum(a)) # p为每个元素对应的抽取概率，缺省为每个元素被抽取的概率相同\nprint(\"\\n>>> 随机可重复抽取：\\n\",c1)\nprint(\"\\n>>> 随机不可重复抽取：\\n\",c2)\nprint(\"\\n>>> 随机但按制度概率抽取：\\n\",c3)\n\n```\n\n```\n>>> a: \n [ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17. 18.\n 19. 20. 21. 22. 23. 24.]\n\n>>> 随机可重复抽取：\n [[16. 15. 18. 18.]\n [14. 18. 18. 14.]\n [23. 16. 13.  3.]]\n\n>>> 随机不可重复抽取：\n [[ 6. 14.  7.  4.]\n [19.  2.  3. 16.]\n [12. 10.  9. 20.]]\n\n>>> 随机但按制度概率抽取：\n [[24. 15. 23. 16.]\n [ 9.  9. 17. 19.]\n [23. 13. 12. 17.]]\n\n\n```\n\n## 3.Numpy的算术运算\n\n### 3.1 对应元素相乘（Element-Wise Product)\n\n对应元素相乘是矩阵中对应位置元素的乘积<br>\n`np.multiply`函数用于数组或矩阵对应元素相乘，输出与相乘数组或矩阵的大小一致\n\n```python\nimport numpy as np\nA = np.array([[1,2],[-1,4]])\nB = np.array([[2,0],[3,4]])\nprint(\">>> A*B: \")\nprint(A*B)\nprint(\"\\n>>> np.multiply: \")\nprint(np.multiply(A,B))\n# ndarray与标量相乘，广播机制\nprint(\"\\n>>> A*2.0:\")\nprint(A*2.0)\nprint(\"\\n>>> A/2.0:\")\nprint(A/2.0)\n```\n\n```\n>>> A*B: \n[[ 2  0]\n [-3 16]]\n\n>>> np.multiply: \n[[ 2  0]\n [-3 16]]\n\n>>> A*2.0:\n[[ 2.  4.]\n [-2.  8.]]\n\n>>> A/2.0:\n[[ 0.5  1. ]\n [-0.5  2. ]]\n\n\n```\n\n**因此，推而广之，数组通过一些 激活函数 后，输出与输入形状一致**\n\n```python\nimport numpy as np \ndef softmoid(x):\n    return 1/(1+np.exp(-x))\ndef relu(x):\n    return np.maximum(0,x)\ndef softmax(x):\n    return np.exp(x)/np.sum(np.exp(x))\n\nX = np.random.rand(2,3)\nprint(\"输入参数X的形状：\",X.shape)\nprint(\"激活函数softmoid输出形状：\",softmoid(X).shape)\nprint(\"激活函数relu输出形状：\",relu(X).shape)\nprint(\"激活函数softmax输出形状：\",softmax(X).shape)\n```\n\n```\n输入参数X的形状： (2, 3)\n激活函数softmoid输出形状： (2, 3)\n激活函数relu输出形状： (2, 3)\n激活函数softmax输出形状： (2, 3)\n\n\n```\n\n### 3.2 点积运算\n\n```python\nX1 = np.array([[1,2],[3,4]])\nX2 = np.array([[5,6,7],[8,9,10]])\nX3 = np.dot(X1,X2)\nprint(X3)\n```\n\n```\n[[21 24 27]\n [47 54 61]]\n\n\n```\n\n## 4. 数组变形\n\n### 4.1 更改数组形状\n\n#### reshape\n\n```python\nimport numpy as np\narr = np.arange(10)\nprint(\"原始：\")\nprint(arr)\n# 将向量 arr 维度变换为2行5列\nprint(\"reshape：\")\nprint(arr.reshape(2,5))\n# 指定维度时，可以只指定行数或者列数，其它用-1代替\nprint(arr.reshape(5,-1))\nprint(arr.reshape(-1,5))\nprint(arr.reshape(3,6)) # ＥＲＲＯＲ：必须要符合原始向量的元素个数，即不能更改原始\n```\n\n```\n原始：\n[0 1 2 3 4 5 6 7 8 9]\nreshape：\n[[0 1 2 3 4]\n [5 6 7 8 9]]\n[[0 1]\n [2 3]\n [4 5]\n [6 7]\n [8 9]]\n[[0 1 2 3 4]\n [5 6 7 8 9]]\n\n\n```\n\n```\n---------------------------------------------------------------------------\n\nValueError                                Traceback (most recent call last)\n\n<ipython-input-7-1df85e490da8> in <module>\n      9 print(arr.reshape(5,-1))\n     10 print(arr.reshape(-1,5))\n---> 11 print(arr.reshape(3,6))\nValueError: cannot reshape array of size 10 into shape (3,6)\n\n```\n\n#### resize\n\n```python\nimport numpy as np\narr = np.arange(10)\nprint(arr)\n# 将向量 arr 维度变换为2行5列\narr.resize(2,5)\nprint(arr)\narr.resize(3,6)# 更改了向量\nprint(arr)\n```\n\n```\n[0 1 2 3 4 5 6 7 8 9]\n[[0 1 2 3 4]\n [5 6 7 8 9]]\n[[0 1 2 3 4 5]\n [6 7 8 9 0 0]\n [0 0 0 0 0 0]]\n\n```\n\n#### 向量转置（T）\n\n```python\nimport numpy as np\narr = np.arange(12).reshape(3,4)\n# 向量为3行4列\nprint(arr)\nprint(arr.T)\n```\n\n```\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n[[ 0  4  8]\n [ 1  5  9]\n [ 2  6 10]\n [ 3  7 11]]\n\n```\n\n#### ravel向量展平\n\n```python\nimport numpy as np\narr = np.arange(6).reshape(2,-1)\nprint(arr)\nprint(\"按照列优先，展平\")\nprint(arr.ravel('F'))\nprint(\"按照行优先，展平\")\nprint(arr.ravel())\n```\n\n```\n[[0 1 2]\n [3 4 5]]\n按照列优先，展平\n[0 3 1 4 2 5]\n按照行优先，展平\n[0 1 2 3 4 5]\n\n```\n\n#### flatten\n\nflatten：把**矩阵**转换为**向量**，这种需求经常出现在**卷积网络**和**全连接层**之间\n\n```python\nimport numpy as np\na = np.floor(10*np.random.random((3,4))) # np.floor(x)：返回小于等于x的最大整数\nprint(a)\nprint(a.flatten())\n```\n\n```\n[[7. 4. 5. 1.]\n [3. 2. 2. 5.]\n [1. 7. 5. 5.]]\n[7. 4. 5. 1. 3. 2. 2. 5. 1. 7. 5. 5.]\n\n\n```\n\n#### squeeze\n\nsqueeze：主要用来**降维**，把矩阵中含1的维度去掉。\n\n```python\nimport numpy as np\narr = np.arange(3).reshape(3,1)\nprint(arr.shape)\nprint(arr.squeeze().shape)\narr1 = np.arange(6).reshape(3,1,2,1)\nprint(arr1.shape)\nprint(arr1.squeeze().shape)\n```\n\n```\n(3, 1)\n(3,)\n(3, 1, 2, 1)\n(3, 2)\n\n```\n\n#### transpose\n\n对高维矩阵进行轴对换，在深度学习中经常使用，比如把图片中表示颜色顺序的RGB改成GBR\n\n```python\nimport numpy as np\narr2 = np.arange(24).reshape(2,3,4)\nprint(arr2.shape)\nprint(arr2.transpose(1,2,0).shape)\n```\n\n```\n(2, 3, 4)\n(3, 4, 2)\n\n\n```\n\n### 4.2 合并数组\n\n- append、concatenate、stack都有一个**axis**参数，用于控制数组的合并方式是**按行还是按列**\n- append和concatenate的数组必须有**相同的行数或者列数**\n- stack,hstack,dstack要求待合并的数组**必须具有相同的形状**\n\n#### append\n\n```python\n# 合并一维数组：\nimport numpy as np\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\nc = np.append(a, b)\nprint(c)\n```\n\n```\n[1 2 3 4 5 6]\n\n```\n\n\n\n```python\n# 合并多维数组：\nimport numpy as np\na = np.arange(4).reshape(2,2)\nb = np.arange(4).reshape(2,2)\n# 按行合并\nc = np.append(a, b, axis=0)\nprint(\"按行合并后的结果：\")\nprint(c)\nprint(\"按行合并后数据的维度：\",c.shape)\n# 按列合并\nd = np.append(a, b, axis=1)\nprint(\"按列合并后的结果：\")\nprint(d)\nprint(\"按列合并后数据的维度：\",d.shape)\n```\n\n```\n按行合并后的结果：\n[[0 1]\n [2 3]\n [0 1]\n [2 3]]\n按行合并后数据的维度： (4, 2)\n按列合并后的结果：\n[[0 1 0 1]\n [2 3 2 3]]\n按列合并后数据的维度： (2, 4)\n\n\n```\n\n#### concatenate\n\n沿指定轴连接数组或矩阵：\n\n```python\nimport numpy as np\na = np.array([[1,2],[3,4]])\nb = np.array([[5,6]])\nc = np.concatenate((a,b), axis=0)\nprint(c)\nd = np.concatenate((a,b.T), axis=1)\nprint(d)\n\n```\n\n```\n[[1 2]\n [3 4]\n [5 6]]\n[[1 2 5]\n [3 4 6]]\n\n\n```\n\n#### stack\n\n按指定轴堆叠数组或矩阵\n\n```python\nimport numpy as np\na = np.array([[1,2],[3,4]])\nb = np.array([[5,6],[7,8]])\nprint(np.stack((a,b),axis=0))\n```\n\n```\n[[[1 2]\n  [3 4]]\n\n [[5 6]\n  [7 8]]]\n\n```\n\n### 5. 批量处理\n\n在深度学习中，源数据通常都比较大，为了充分利用GPU和Numpy的平行处理优势，往往采用批量处理方法**Mini-Batch**<br>\n拆分大数据为多个batch的步骤如下：<br>\n\n- 得到数据集\n- 随机打乱数据\n- 定义batch大小\n- 批处理数据集\n\n```python\nimport numpy as np\n# 生成10000个形状为2*3的矩阵\ndata_train = np.random.randn(10000,2,3)\n# data_train是一个三维矩阵，第一个维度是样本数，第2，3个维度是样本数量\nprint(data_train.shape)\n#打乱这10000条数据\nnp.random.shuffle(data_train)\n# 定义批量大小\nbatch_size = 100\n# 进行批处理\nfor i in range(0, len(data_train), batch_size):\n    x_batch_sum = np.sum(data_train[i:i+batch_size])\n    print(\"第{}批次，该批次的数据之和：{}\".format(i,x_batch_sum))\n```\n\n```\n(10000, 2, 3)\n第0批次，该批次的数据之和：55.435104077411005\n第100批次，该批次的数据之和：-30.16163984034822\n第200批次，该批次的数据之和：-16.005886476247337\n第300批次，该批次的数据之和：26.243420914316697\n第400批次，该批次的数据之和：54.09272512386492\n第500批次，该批次的数据之和：10.666172638549797\n第600批次，该批次的数据之和：-7.4524338126181195\n第700批次，该批次的数据之和：16.35508797187559\n第800批次，该批次的数据之和：-31.156485946418083\n第900批次，该批次的数据之和：-30.958781413477553\n第1000批次，该批次的数据之和：-17.74687318011051\n第1100批次，该批次的数据之和：-13.155419825123367\n第1200批次，该批次的数据之和：36.62068018330997\n第1300批次，该批次的数据之和：-9.52610840971721\n第1400批次，该批次的数据之和：40.124990215128086\n第1500批次，该批次的数据之和：-8.641718267773296\n第1600批次，该批次的数据之和：29.490956639761517\n第1700批次，该批次的数据之和：-18.545788043979094\n第1800批次，该批次的数据之和：6.016028361267317\n第1900批次，该批次的数据之和：-18.466307499414476\n第2000批次，该批次的数据之和：37.212642842831734\n第2100批次，该批次的数据之和：3.2911450511959117\n第2200批次，该批次的数据之和：-41.99494902396746\n第2300批次，该批次的数据之和：1.2948216575668532\n第2400批次，该批次的数据之和：-71.43580130811536\n第2500批次，该批次的数据之和：17.87735900883432\n第2600批次，该批次的数据之和：37.67664694792802\n第2700批次，该批次的数据之和：-7.55997209759624\n第2800批次，该批次的数据之和：30.914571710543747\n第2900批次，该批次的数据之和：-10.18189132360644\n第3000批次，该批次的数据之和：-30.671382196814438\n第3100批次，该批次的数据之和：-0.23187480748789113\n第3200批次，该批次的数据之和：12.554362924197958\n第3300批次，该批次的数据之和：-53.21534337519745\n第3400批次，该批次的数据之和：-26.583560593560733\n第3500批次，该批次的数据之和：-23.963057796830483\n第3600批次，该批次的数据之和：-20.135410853277417\n第3700批次，该批次的数据之和：38.023911057082785\n第3800批次，该批次的数据之和：-13.32064222612313\n第3900批次，该批次的数据之和：-6.889328224640572\n第4000批次，该批次的数据之和：-31.01990202931473\n第4100批次，该批次的数据之和：-27.84137706109179\n第4200批次，该批次的数据之和：33.49698637790293\n第4300批次，该批次的数据之和：12.212554187171982\n第4400批次，该批次的数据之和：3.512815856108185\n第4500批次，该批次的数据之和：-4.260687424492915\n第4600批次，该批次的数据之和：35.48174080841822\n第4700批次，该批次的数据之和：47.11583122229985\n第4800批次，该批次的数据之和：35.11652490662901\n第4900批次，该批次的数据之和：6.923124673929591\n第5000批次，该批次的数据之和：-0.9601519043571036\n第5100批次，该批次的数据之和：31.40795018298309\n第5200批次，该批次的数据之和：-14.370508039492375\n第5300批次，该批次的数据之和：2.0080627697661484\n第5400批次，该批次的数据之和：49.9423922559288\n第5500批次，该批次的数据之和：1.5986276917534745\n第5600批次，该批次的数据之和：-14.292559911652749\n第5700批次，该批次的数据之和：9.269236636816146\n第5800批次，该批次的数据之和：35.261939078135256\n第5900批次，该批次的数据之和：21.40686158271405\n第6000批次，该批次的数据之和：63.72421750904502\n第6100批次，该批次的数据之和：-4.449162479660419\n第6200批次，该批次的数据之和：-12.87971193486877\n第6300批次，该批次的数据之和：16.739166846569468\n第6400批次，该批次的数据之和：15.507139793752685\n第6500批次，该批次的数据之和：28.237722121881088\n第6600批次，该批次的数据之和：19.428664862631027\n第6700批次，该批次的数据之和：15.736081688984164\n第6800批次，该批次的数据之和：-12.159796741250288\n第6900批次，该批次的数据之和：28.296243694838907\n第7000批次，该批次的数据之和：7.500594716026612\n第7100批次，该批次的数据之和：4.654555617783968\n第7200批次，该批次的数据之和：-8.868369636944283\n第7300批次，该批次的数据之和：-38.15820793655656\n第7400批次，该批次的数据之和：18.964283594574983\n第7500批次，该批次的数据之和：-11.955730060930211\n第7600批次，该批次的数据之和：-2.8986304404518926\n第7700批次，该批次的数据之和：35.34306520647606\n第7800批次，该批次的数据之和：12.358253221555003\n第7900批次，该批次的数据之和：-30.10571822052315\n第8000批次，该批次的数据之和：-46.60238546662976\n第8100批次，该批次的数据之和：-14.535660376705316\n第8200批次，该批次的数据之和：-32.16956146044525\n第8300批次，该批次的数据之和：22.891974055182587\n第8400批次，该批次的数据之和：17.937267722718893\n第8500批次，该批次的数据之和：-7.5960642210042195\n第8600批次，该批次的数据之和：-23.25232489911175\n第8700批次，该批次的数据之和：-1.0112532518592268\n第8800批次，该批次的数据之和：-53.012638021916835\n第8900批次，该批次的数据之和：43.233451389942886\n第9000批次，该批次的数据之和：16.00328538980951\n第9100批次，该批次的数据之和：52.78228888158892\n第9200批次，该批次的数据之和：-21.00762549901342\n第9300批次，该批次的数据之和：-21.380219319924976\n第9400批次，该批次的数据之和：-25.89993133337054\n第9500批次，该批次的数据之和：8.653750464608649\n第9600批次，该批次的数据之和：-47.21038400234219\n第9700批次，该批次的数据之和：25.37845335924261\n第9800批次，该批次的数据之和：-14.943652726871015\n第9900批次，该批次的数据之和：6.466367180724267\n\n\n```\n\n### 6. 通用函数\n\nNumpy提供两种基本的对象，即**ndarray和ufunc对象**<br>\nufunc是一种能对数组中每个元素进行操作的函数<br>\n\n#### Math与Numpy函数的对比\n\n```python\nimport numpy as np\nimport math\nimport time\nx = [i*0.001 for i in np.arange(1000000)]\nstart = time.clock()\nfor i, t in enumerate(x):\n    x[i] = math.sin(t)\nprint(\"math.sin:\", time.clock()-start)\nx = [i*0.001 for i in np.arange(1000000)]\nx = np.array(x)\nstart = time.clock()\nnp.sin(x) # numpy可以并行计算，不用循环\nprint(\"numpy.sin:\",time.clock()-start)\n```\n\n```\nmath.sin: 0.5838227\nnumpy.sin: 0.032238599999999895\n\n\n```\n\n由此可见，numpy比math快10倍左右\n\n#### 循环和向量运算比较\n\n```python\nimport numpy as np\nimport time\nx1 = np.random.rand(1000000)\nx2 = np.random.rand(1000000)\n\n## 使用循环计算向量的点积\ntic = time.process_time() # 计算程序所用时间\ndot = 0\nfor i in range(len(x1)):\n    dot += x1[i]*x2[i]\ntoc = time.process_time()\nprint(\"dot = \"+str(dot)+\"\\nfor loop----- Computation time = \"+str(1000*(toc-tic))+\"ms\")\n##使用numpy函数求点积\ntic = time.process_time()\ndot = 0\ndot = np.dot(x1,x2)\ntoc = time.process_time()\nprint(\"dot = \"+str(dot)+\"\\nvector version----- Compution time = \"+str(1000*(toc-tic))+\"ms\")\n```\n\n```\ndot = 249573.00014043407\nfor loop----- Computation time = 890.625ms\ndot = 249573.0001404432\nvector version----- Compution time = 31.25ms\n\n\n```\n\n在深度学习算法中，一般都使用向量化矩阵进行运算\n\n### 7. 广播机制\n\nNumpy的ufunc中要求输入数组是一致的,当数组的**shape不相等**时，则会使用**广播机制**\n\n```python\nimport numpy as np \nA = np.arange(0, 40, 10).reshape(4,1)\nB = np.arange(0, 3)\nprint(\"A矩阵的形状：{}，B矩阵的形状：{}\".format(A.shape, B.shape))\nC = A+B\nprint(\"C矩阵的形状：{}\".format(C.shape))\nprint(C)\n```\n\n```\nA矩阵的形状：(4, 1)，B矩阵的形状：(3,)\nC矩阵的形状：(4, 3)\n[[ 0  1  2]\n [10 11 12]\n [20 21 22]\n [30 31 32]]\n\n\n```\n\n广播机制的生效规则：\n\n- 所有输入数组都向其中shape最长的数组看齐，不足的部分通过在前面补1\n- 输出数组的shape是输入数组shape的各个轴上的最大值\n- 若输入数组的某个轴和输出数组的某个轴的长度相同或，某个轴的长度为1时，这个数组能被用来计算，否则出错\n- 当输入数组的某个轴的长度为1时，沿此轴运算时都用此轴上的第一组值","source":"_posts/Numpy学习笔记.md","raw":"---\ntitle: Numpy学习笔记\ndate: 2021-12-27 10:06:58\ntags: Numpy\nmathjax: true\n---\n\n\n\n# Numpy学习笔记\n\n## 1. 生成Numpy数组\n\n### 1.1 从已有数据中创建数组\n\n- 将列表转换成ndarray\n\n```python\nimport numpy as np\nlst1 = [3.14, 2.17, 1, 2, 3]\nnd1 = np.array(lst1)\nprint(nd1)\nprint(type(nd1))\n```\n\n```\n[3.14 2.17 1.   2.   3.  ]\n<class 'numpy.ndarray'>\n```\n\n- 嵌套列表可以转换为多维ndarray\n\n```python\nlst2 = [lst1,[1,2,3,4,5]]\nnd2 = np.array(lst2)\nprint(nd2)\nprint(type(nd2))\n```\n\n```\n[[3.14 2.17 1.   2.   3.  ]\n [1.   2.   3.   4.   5.  ]]\n<class 'numpy.ndarray'>\n```\n\n将上面列表转换为元组同样适用\n\n### 1.2 利用random模块生成数据\n\n> 在深度学习中，我们经常需要对一些参数进行初始化，因此为了更有效地训练模型，提高模型的性能，有些初始化还需要满足一定的条件，比如满足正态分布或者均匀分布等\n\n- np.random.random: 生成0到1之间的随机数\n- np.random.uniform: 生成均匀分布的随机数\n- np.random.randn: 生成标准正太的随机数\n- np.random.randint: 生成随机的整数\n- np.random.normal: 生成正太分布\n- np.random.shuffle: 随机打乱顺序\n- np.random.seed: 设置随机种子数\n- random_sample: 生成随机的浮点数\n\n```python\nnd3 = np.random.random([3,3])\nprint(nd3)\n```\n\n```\n[[0.31219192 0.28280657 0.69562286]\n [0.29565657 0.06571726 0.89714922]\n [0.22436833 0.03590968 0.86430496]]\n```\n\n```python\nprint(\"nd3的形状为：\",nd3.shape)\n>>> nd3的形状为： (3, 3)\n```\n\n为了每次生成同一份数据，可以指定一个随机种子，使用shuffle函数打乱生成的随机数\n\n```python\nnp.random.seed(123)\nnd4 = np.random.randn(2,3)\nprint(nd4)\nnp.random.shuffle(nd4)\nprint(\"随机打乱后数据:\")\nprint(nd4)\nprint(type(nd4))\n```\n\n```\n[[-1.0856306   0.99734545  0.2829785 ]\n [-1.50629471 -0.57860025  1.65143654]]\n随机打乱后数据:\n[[-1.50629471 -0.57860025  1.65143654]\n [-1.0856306   0.99734545  0.2829785 ]]\n<class 'numpy.ndarray'>\n```\n\n### 1.3 创建特定形状的一维数组\n\n> 参数初始化时，有时需要生成一些特殊的矩阵，如全是0或全是1的数组或矩阵，这时，可以利用`np.zeros`，`np.ones`,`np.diag`来实现\n\n![IMG_0360.PNG](attachment:IMG_0360.PNG)\n\n```python\n# 生成全是0的3*3的矩阵\nnd5 = np.zeros([3,3])\n# 生成nd5形状一样的全是0的矩阵\nnd6 = np.zeros_like(nd5)\n# 生成全是1的3*3的矩阵\nnd7 = np.ones([3,3])\n# 生成3阶单位矩阵\nnd8 = np.eye(3)\n# 生成3阶对角矩阵\nnd9 = np.diag([1,2,3])\n```\n\n```python\nprint(nd5)\nprint(nd6)\nprint(nd7)\nprint(nd8)\nprint(nd9)\n```\n\n```\n[[0. 0. 0.]\n [0. 0. 0.]\n [0. 0. 0.]]\n[[0. 0. 0.]\n [0. 0. 0.]\n [0. 0. 0.]]\n[[1. 1. 1.]\n [1. 1. 1.]\n [1. 1. 1.]]\n[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n[[1 0 0]\n [0 2 0]\n [0 0 3]]\n```\n\n有时，需要把生成的矩阵暂时保存起来以备后续使用\n\n```python\nnd10 = np.random.random([5,5])\nnp.savetxt(X=nd10,fname=\"./test1.txt\")\nnd11 = np.loadtxt('./test1.txt')\nprint(nd11)\n```\n\n```\n[[0.41092437 0.5796943  0.13995076 0.40101756 0.62731701]\n [0.32415089 0.24475928 0.69475518 0.5939024  0.63179202]\n [0.44025718 0.08372648 0.71233018 0.42786349 0.2977805 ]\n [0.49208478 0.74029639 0.35772892 0.41720995 0.65472131]\n [0.37380143 0.23451288 0.98799529 0.76599595 0.77700444]]\n```\n\n### 1.4 利用arange/linspace函数生成数组\n\n```python\nprint(np.arange(10)) # start=0, stop=10, step=1\n```\n\n```\n[0 1 2 3 4 5 6 7 8 9]\n```\n\n\n\n```python\nprint(np.arange(0,10))\n```\n\n```\n[0 1 2 3 4 5 6 7 8 9]\n```\n\n\n\n```python\nprint(np.arange(1,4,0.5))\n```\n\n```\n[1.  1.5 2.  2.5 3.  3.5]\n```\n\n\n\n```python\nprint(np.arange(9,-1,-1))\n```\n\n```\n[9 8 7 6 5 4 3 2 1 0]\n```\n\nlinspace可以根据输入的指定数据范围以及等分数量，自动生成一个线性等分向量\n\n```python\nprint(np.linspace(0,1,10)) # 步长=(1-0)/9\n```\n\n```\n[0.         0.11111111 0.22222222 0.33333333 0.44444444 0.55555556\n 0.66666667 0.77777778 0.88888889 1.        ]\n```\n\n\n\n```python\nprint(np.linspace(0.1,1,10))\n```\n\n```\n[0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]\n```\n\n\n\n```python\nprint(np.logspace(0,1,10))\n```\n\n```\n[ 1.          1.29154967  1.66810054  2.15443469  2.7825594   3.59381366\n  4.64158883  5.9948425   7.74263683 10.        ]\n```\n\n## 2. 获取元素\n\n```python\nimport numpy as np\nnp.random.seed(2019)\nnd12 = np.random.random([10])\nprint(\">>>ndarray: \\n\",nd12)\n# 获取指定位置的数据，获取第4个元素\nprint(\"\\n>>>第4个元素: \\n\",nd12[3])\n# 截取一段数据\nprint(\"\\n>>>第4到第6个元素：\",nd12[3:6])\nprint(\"\\n>>>截取固定间隔的数据：\\n\",nd12[1:6:2])\nprint(\"\\n>>>倒序取数: \\n\",nd12[::-2])\nprint(\"\\n>>>截取一个多维数组的一个区域内的数据：\")\nnd13 = np.arange(25).reshape([5,5])\nprint(nd13[1:3,1:3])\nprint(\"\\n>>>截取一个多维数组中，数值在一个值域之内的数据：\")\nprint(nd13[(nd13>3)&(nd13<10)])\nprint(\"\\n>>>截取多维数组中，指定的列，如读取第2，3列：\")\nprint(nd13[:,1:3])\n```\n\n```\n>>>ndarray: \n [0.90348221 0.39308051 0.62396996 0.6378774  0.88049907 0.29917202\n 0.70219827 0.90320616 0.88138193 0.4057498 ]\n\n>>>第4个元素: \n 0.6378774010222266\n\n>>>第4到第6个元素： [0.6378774  0.88049907 0.29917202]\n\n>>>截取固定间隔的数据：\n [0.39308051 0.6378774  0.29917202]\n\n>>>倒序取数: \n [0.4057498  0.90320616 0.29917202 0.6378774  0.39308051]\n\n>>>截取一个多维数组的一个区域内的数据：\n[[ 6  7]\n [11 12]]\n\n>>>截取一个多维数组中，数值在一个值域之内的数据：\n[4 5 6 7 8 9]\n\n>>>截取多维数组中，指定的列，如读取第2，3列：\n[[ 1  2]\n [ 6  7]\n [11 12]\n [16 17]\n [21 22]]\n\n```\n\n> 获取ndarray中的部分元素，除了通过指定的索引标签来实现外，还可以通过使用一些函数来实现，如通过`random.choice`函数从指定的样本中随机抽取数据\n\n```python\nimport numpy as np\nfrom numpy import random as nr\na = np.arange(1,25,dtype=float)\nprint(\">>> a: \\n\",a)\nc1 = nr.choice(a, size=(3,4)) #size指定输出数组形状\nc2 = nr.choice(a, size=(3,4), replace=False) # replace默认为Ture，即可重复抽取\nc3 = nr.choice(a, size=(3,4), p=a/np.sum(a)) # p为每个元素对应的抽取概率，缺省为每个元素被抽取的概率相同\nprint(\"\\n>>> 随机可重复抽取：\\n\",c1)\nprint(\"\\n>>> 随机不可重复抽取：\\n\",c2)\nprint(\"\\n>>> 随机但按制度概率抽取：\\n\",c3)\n\n```\n\n```\n>>> a: \n [ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17. 18.\n 19. 20. 21. 22. 23. 24.]\n\n>>> 随机可重复抽取：\n [[16. 15. 18. 18.]\n [14. 18. 18. 14.]\n [23. 16. 13.  3.]]\n\n>>> 随机不可重复抽取：\n [[ 6. 14.  7.  4.]\n [19.  2.  3. 16.]\n [12. 10.  9. 20.]]\n\n>>> 随机但按制度概率抽取：\n [[24. 15. 23. 16.]\n [ 9.  9. 17. 19.]\n [23. 13. 12. 17.]]\n\n\n```\n\n## 3.Numpy的算术运算\n\n### 3.1 对应元素相乘（Element-Wise Product)\n\n对应元素相乘是矩阵中对应位置元素的乘积<br>\n`np.multiply`函数用于数组或矩阵对应元素相乘，输出与相乘数组或矩阵的大小一致\n\n```python\nimport numpy as np\nA = np.array([[1,2],[-1,4]])\nB = np.array([[2,0],[3,4]])\nprint(\">>> A*B: \")\nprint(A*B)\nprint(\"\\n>>> np.multiply: \")\nprint(np.multiply(A,B))\n# ndarray与标量相乘，广播机制\nprint(\"\\n>>> A*2.0:\")\nprint(A*2.0)\nprint(\"\\n>>> A/2.0:\")\nprint(A/2.0)\n```\n\n```\n>>> A*B: \n[[ 2  0]\n [-3 16]]\n\n>>> np.multiply: \n[[ 2  0]\n [-3 16]]\n\n>>> A*2.0:\n[[ 2.  4.]\n [-2.  8.]]\n\n>>> A/2.0:\n[[ 0.5  1. ]\n [-0.5  2. ]]\n\n\n```\n\n**因此，推而广之，数组通过一些 激活函数 后，输出与输入形状一致**\n\n```python\nimport numpy as np \ndef softmoid(x):\n    return 1/(1+np.exp(-x))\ndef relu(x):\n    return np.maximum(0,x)\ndef softmax(x):\n    return np.exp(x)/np.sum(np.exp(x))\n\nX = np.random.rand(2,3)\nprint(\"输入参数X的形状：\",X.shape)\nprint(\"激活函数softmoid输出形状：\",softmoid(X).shape)\nprint(\"激活函数relu输出形状：\",relu(X).shape)\nprint(\"激活函数softmax输出形状：\",softmax(X).shape)\n```\n\n```\n输入参数X的形状： (2, 3)\n激活函数softmoid输出形状： (2, 3)\n激活函数relu输出形状： (2, 3)\n激活函数softmax输出形状： (2, 3)\n\n\n```\n\n### 3.2 点积运算\n\n```python\nX1 = np.array([[1,2],[3,4]])\nX2 = np.array([[5,6,7],[8,9,10]])\nX3 = np.dot(X1,X2)\nprint(X3)\n```\n\n```\n[[21 24 27]\n [47 54 61]]\n\n\n```\n\n## 4. 数组变形\n\n### 4.1 更改数组形状\n\n#### reshape\n\n```python\nimport numpy as np\narr = np.arange(10)\nprint(\"原始：\")\nprint(arr)\n# 将向量 arr 维度变换为2行5列\nprint(\"reshape：\")\nprint(arr.reshape(2,5))\n# 指定维度时，可以只指定行数或者列数，其它用-1代替\nprint(arr.reshape(5,-1))\nprint(arr.reshape(-1,5))\nprint(arr.reshape(3,6)) # ＥＲＲＯＲ：必须要符合原始向量的元素个数，即不能更改原始\n```\n\n```\n原始：\n[0 1 2 3 4 5 6 7 8 9]\nreshape：\n[[0 1 2 3 4]\n [5 6 7 8 9]]\n[[0 1]\n [2 3]\n [4 5]\n [6 7]\n [8 9]]\n[[0 1 2 3 4]\n [5 6 7 8 9]]\n\n\n```\n\n```\n---------------------------------------------------------------------------\n\nValueError                                Traceback (most recent call last)\n\n<ipython-input-7-1df85e490da8> in <module>\n      9 print(arr.reshape(5,-1))\n     10 print(arr.reshape(-1,5))\n---> 11 print(arr.reshape(3,6))\nValueError: cannot reshape array of size 10 into shape (3,6)\n\n```\n\n#### resize\n\n```python\nimport numpy as np\narr = np.arange(10)\nprint(arr)\n# 将向量 arr 维度变换为2行5列\narr.resize(2,5)\nprint(arr)\narr.resize(3,6)# 更改了向量\nprint(arr)\n```\n\n```\n[0 1 2 3 4 5 6 7 8 9]\n[[0 1 2 3 4]\n [5 6 7 8 9]]\n[[0 1 2 3 4 5]\n [6 7 8 9 0 0]\n [0 0 0 0 0 0]]\n\n```\n\n#### 向量转置（T）\n\n```python\nimport numpy as np\narr = np.arange(12).reshape(3,4)\n# 向量为3行4列\nprint(arr)\nprint(arr.T)\n```\n\n```\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n[[ 0  4  8]\n [ 1  5  9]\n [ 2  6 10]\n [ 3  7 11]]\n\n```\n\n#### ravel向量展平\n\n```python\nimport numpy as np\narr = np.arange(6).reshape(2,-1)\nprint(arr)\nprint(\"按照列优先，展平\")\nprint(arr.ravel('F'))\nprint(\"按照行优先，展平\")\nprint(arr.ravel())\n```\n\n```\n[[0 1 2]\n [3 4 5]]\n按照列优先，展平\n[0 3 1 4 2 5]\n按照行优先，展平\n[0 1 2 3 4 5]\n\n```\n\n#### flatten\n\nflatten：把**矩阵**转换为**向量**，这种需求经常出现在**卷积网络**和**全连接层**之间\n\n```python\nimport numpy as np\na = np.floor(10*np.random.random((3,4))) # np.floor(x)：返回小于等于x的最大整数\nprint(a)\nprint(a.flatten())\n```\n\n```\n[[7. 4. 5. 1.]\n [3. 2. 2. 5.]\n [1. 7. 5. 5.]]\n[7. 4. 5. 1. 3. 2. 2. 5. 1. 7. 5. 5.]\n\n\n```\n\n#### squeeze\n\nsqueeze：主要用来**降维**，把矩阵中含1的维度去掉。\n\n```python\nimport numpy as np\narr = np.arange(3).reshape(3,1)\nprint(arr.shape)\nprint(arr.squeeze().shape)\narr1 = np.arange(6).reshape(3,1,2,1)\nprint(arr1.shape)\nprint(arr1.squeeze().shape)\n```\n\n```\n(3, 1)\n(3,)\n(3, 1, 2, 1)\n(3, 2)\n\n```\n\n#### transpose\n\n对高维矩阵进行轴对换，在深度学习中经常使用，比如把图片中表示颜色顺序的RGB改成GBR\n\n```python\nimport numpy as np\narr2 = np.arange(24).reshape(2,3,4)\nprint(arr2.shape)\nprint(arr2.transpose(1,2,0).shape)\n```\n\n```\n(2, 3, 4)\n(3, 4, 2)\n\n\n```\n\n### 4.2 合并数组\n\n- append、concatenate、stack都有一个**axis**参数，用于控制数组的合并方式是**按行还是按列**\n- append和concatenate的数组必须有**相同的行数或者列数**\n- stack,hstack,dstack要求待合并的数组**必须具有相同的形状**\n\n#### append\n\n```python\n# 合并一维数组：\nimport numpy as np\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\nc = np.append(a, b)\nprint(c)\n```\n\n```\n[1 2 3 4 5 6]\n\n```\n\n\n\n```python\n# 合并多维数组：\nimport numpy as np\na = np.arange(4).reshape(2,2)\nb = np.arange(4).reshape(2,2)\n# 按行合并\nc = np.append(a, b, axis=0)\nprint(\"按行合并后的结果：\")\nprint(c)\nprint(\"按行合并后数据的维度：\",c.shape)\n# 按列合并\nd = np.append(a, b, axis=1)\nprint(\"按列合并后的结果：\")\nprint(d)\nprint(\"按列合并后数据的维度：\",d.shape)\n```\n\n```\n按行合并后的结果：\n[[0 1]\n [2 3]\n [0 1]\n [2 3]]\n按行合并后数据的维度： (4, 2)\n按列合并后的结果：\n[[0 1 0 1]\n [2 3 2 3]]\n按列合并后数据的维度： (2, 4)\n\n\n```\n\n#### concatenate\n\n沿指定轴连接数组或矩阵：\n\n```python\nimport numpy as np\na = np.array([[1,2],[3,4]])\nb = np.array([[5,6]])\nc = np.concatenate((a,b), axis=0)\nprint(c)\nd = np.concatenate((a,b.T), axis=1)\nprint(d)\n\n```\n\n```\n[[1 2]\n [3 4]\n [5 6]]\n[[1 2 5]\n [3 4 6]]\n\n\n```\n\n#### stack\n\n按指定轴堆叠数组或矩阵\n\n```python\nimport numpy as np\na = np.array([[1,2],[3,4]])\nb = np.array([[5,6],[7,8]])\nprint(np.stack((a,b),axis=0))\n```\n\n```\n[[[1 2]\n  [3 4]]\n\n [[5 6]\n  [7 8]]]\n\n```\n\n### 5. 批量处理\n\n在深度学习中，源数据通常都比较大，为了充分利用GPU和Numpy的平行处理优势，往往采用批量处理方法**Mini-Batch**<br>\n拆分大数据为多个batch的步骤如下：<br>\n\n- 得到数据集\n- 随机打乱数据\n- 定义batch大小\n- 批处理数据集\n\n```python\nimport numpy as np\n# 生成10000个形状为2*3的矩阵\ndata_train = np.random.randn(10000,2,3)\n# data_train是一个三维矩阵，第一个维度是样本数，第2，3个维度是样本数量\nprint(data_train.shape)\n#打乱这10000条数据\nnp.random.shuffle(data_train)\n# 定义批量大小\nbatch_size = 100\n# 进行批处理\nfor i in range(0, len(data_train), batch_size):\n    x_batch_sum = np.sum(data_train[i:i+batch_size])\n    print(\"第{}批次，该批次的数据之和：{}\".format(i,x_batch_sum))\n```\n\n```\n(10000, 2, 3)\n第0批次，该批次的数据之和：55.435104077411005\n第100批次，该批次的数据之和：-30.16163984034822\n第200批次，该批次的数据之和：-16.005886476247337\n第300批次，该批次的数据之和：26.243420914316697\n第400批次，该批次的数据之和：54.09272512386492\n第500批次，该批次的数据之和：10.666172638549797\n第600批次，该批次的数据之和：-7.4524338126181195\n第700批次，该批次的数据之和：16.35508797187559\n第800批次，该批次的数据之和：-31.156485946418083\n第900批次，该批次的数据之和：-30.958781413477553\n第1000批次，该批次的数据之和：-17.74687318011051\n第1100批次，该批次的数据之和：-13.155419825123367\n第1200批次，该批次的数据之和：36.62068018330997\n第1300批次，该批次的数据之和：-9.52610840971721\n第1400批次，该批次的数据之和：40.124990215128086\n第1500批次，该批次的数据之和：-8.641718267773296\n第1600批次，该批次的数据之和：29.490956639761517\n第1700批次，该批次的数据之和：-18.545788043979094\n第1800批次，该批次的数据之和：6.016028361267317\n第1900批次，该批次的数据之和：-18.466307499414476\n第2000批次，该批次的数据之和：37.212642842831734\n第2100批次，该批次的数据之和：3.2911450511959117\n第2200批次，该批次的数据之和：-41.99494902396746\n第2300批次，该批次的数据之和：1.2948216575668532\n第2400批次，该批次的数据之和：-71.43580130811536\n第2500批次，该批次的数据之和：17.87735900883432\n第2600批次，该批次的数据之和：37.67664694792802\n第2700批次，该批次的数据之和：-7.55997209759624\n第2800批次，该批次的数据之和：30.914571710543747\n第2900批次，该批次的数据之和：-10.18189132360644\n第3000批次，该批次的数据之和：-30.671382196814438\n第3100批次，该批次的数据之和：-0.23187480748789113\n第3200批次，该批次的数据之和：12.554362924197958\n第3300批次，该批次的数据之和：-53.21534337519745\n第3400批次，该批次的数据之和：-26.583560593560733\n第3500批次，该批次的数据之和：-23.963057796830483\n第3600批次，该批次的数据之和：-20.135410853277417\n第3700批次，该批次的数据之和：38.023911057082785\n第3800批次，该批次的数据之和：-13.32064222612313\n第3900批次，该批次的数据之和：-6.889328224640572\n第4000批次，该批次的数据之和：-31.01990202931473\n第4100批次，该批次的数据之和：-27.84137706109179\n第4200批次，该批次的数据之和：33.49698637790293\n第4300批次，该批次的数据之和：12.212554187171982\n第4400批次，该批次的数据之和：3.512815856108185\n第4500批次，该批次的数据之和：-4.260687424492915\n第4600批次，该批次的数据之和：35.48174080841822\n第4700批次，该批次的数据之和：47.11583122229985\n第4800批次，该批次的数据之和：35.11652490662901\n第4900批次，该批次的数据之和：6.923124673929591\n第5000批次，该批次的数据之和：-0.9601519043571036\n第5100批次，该批次的数据之和：31.40795018298309\n第5200批次，该批次的数据之和：-14.370508039492375\n第5300批次，该批次的数据之和：2.0080627697661484\n第5400批次，该批次的数据之和：49.9423922559288\n第5500批次，该批次的数据之和：1.5986276917534745\n第5600批次，该批次的数据之和：-14.292559911652749\n第5700批次，该批次的数据之和：9.269236636816146\n第5800批次，该批次的数据之和：35.261939078135256\n第5900批次，该批次的数据之和：21.40686158271405\n第6000批次，该批次的数据之和：63.72421750904502\n第6100批次，该批次的数据之和：-4.449162479660419\n第6200批次，该批次的数据之和：-12.87971193486877\n第6300批次，该批次的数据之和：16.739166846569468\n第6400批次，该批次的数据之和：15.507139793752685\n第6500批次，该批次的数据之和：28.237722121881088\n第6600批次，该批次的数据之和：19.428664862631027\n第6700批次，该批次的数据之和：15.736081688984164\n第6800批次，该批次的数据之和：-12.159796741250288\n第6900批次，该批次的数据之和：28.296243694838907\n第7000批次，该批次的数据之和：7.500594716026612\n第7100批次，该批次的数据之和：4.654555617783968\n第7200批次，该批次的数据之和：-8.868369636944283\n第7300批次，该批次的数据之和：-38.15820793655656\n第7400批次，该批次的数据之和：18.964283594574983\n第7500批次，该批次的数据之和：-11.955730060930211\n第7600批次，该批次的数据之和：-2.8986304404518926\n第7700批次，该批次的数据之和：35.34306520647606\n第7800批次，该批次的数据之和：12.358253221555003\n第7900批次，该批次的数据之和：-30.10571822052315\n第8000批次，该批次的数据之和：-46.60238546662976\n第8100批次，该批次的数据之和：-14.535660376705316\n第8200批次，该批次的数据之和：-32.16956146044525\n第8300批次，该批次的数据之和：22.891974055182587\n第8400批次，该批次的数据之和：17.937267722718893\n第8500批次，该批次的数据之和：-7.5960642210042195\n第8600批次，该批次的数据之和：-23.25232489911175\n第8700批次，该批次的数据之和：-1.0112532518592268\n第8800批次，该批次的数据之和：-53.012638021916835\n第8900批次，该批次的数据之和：43.233451389942886\n第9000批次，该批次的数据之和：16.00328538980951\n第9100批次，该批次的数据之和：52.78228888158892\n第9200批次，该批次的数据之和：-21.00762549901342\n第9300批次，该批次的数据之和：-21.380219319924976\n第9400批次，该批次的数据之和：-25.89993133337054\n第9500批次，该批次的数据之和：8.653750464608649\n第9600批次，该批次的数据之和：-47.21038400234219\n第9700批次，该批次的数据之和：25.37845335924261\n第9800批次，该批次的数据之和：-14.943652726871015\n第9900批次，该批次的数据之和：6.466367180724267\n\n\n```\n\n### 6. 通用函数\n\nNumpy提供两种基本的对象，即**ndarray和ufunc对象**<br>\nufunc是一种能对数组中每个元素进行操作的函数<br>\n\n#### Math与Numpy函数的对比\n\n```python\nimport numpy as np\nimport math\nimport time\nx = [i*0.001 for i in np.arange(1000000)]\nstart = time.clock()\nfor i, t in enumerate(x):\n    x[i] = math.sin(t)\nprint(\"math.sin:\", time.clock()-start)\nx = [i*0.001 for i in np.arange(1000000)]\nx = np.array(x)\nstart = time.clock()\nnp.sin(x) # numpy可以并行计算，不用循环\nprint(\"numpy.sin:\",time.clock()-start)\n```\n\n```\nmath.sin: 0.5838227\nnumpy.sin: 0.032238599999999895\n\n\n```\n\n由此可见，numpy比math快10倍左右\n\n#### 循环和向量运算比较\n\n```python\nimport numpy as np\nimport time\nx1 = np.random.rand(1000000)\nx2 = np.random.rand(1000000)\n\n## 使用循环计算向量的点积\ntic = time.process_time() # 计算程序所用时间\ndot = 0\nfor i in range(len(x1)):\n    dot += x1[i]*x2[i]\ntoc = time.process_time()\nprint(\"dot = \"+str(dot)+\"\\nfor loop----- Computation time = \"+str(1000*(toc-tic))+\"ms\")\n##使用numpy函数求点积\ntic = time.process_time()\ndot = 0\ndot = np.dot(x1,x2)\ntoc = time.process_time()\nprint(\"dot = \"+str(dot)+\"\\nvector version----- Compution time = \"+str(1000*(toc-tic))+\"ms\")\n```\n\n```\ndot = 249573.00014043407\nfor loop----- Computation time = 890.625ms\ndot = 249573.0001404432\nvector version----- Compution time = 31.25ms\n\n\n```\n\n在深度学习算法中，一般都使用向量化矩阵进行运算\n\n### 7. 广播机制\n\nNumpy的ufunc中要求输入数组是一致的,当数组的**shape不相等**时，则会使用**广播机制**\n\n```python\nimport numpy as np \nA = np.arange(0, 40, 10).reshape(4,1)\nB = np.arange(0, 3)\nprint(\"A矩阵的形状：{}，B矩阵的形状：{}\".format(A.shape, B.shape))\nC = A+B\nprint(\"C矩阵的形状：{}\".format(C.shape))\nprint(C)\n```\n\n```\nA矩阵的形状：(4, 1)，B矩阵的形状：(3,)\nC矩阵的形状：(4, 3)\n[[ 0  1  2]\n [10 11 12]\n [20 21 22]\n [30 31 32]]\n\n\n```\n\n广播机制的生效规则：\n\n- 所有输入数组都向其中shape最长的数组看齐，不足的部分通过在前面补1\n- 输出数组的shape是输入数组shape的各个轴上的最大值\n- 若输入数组的某个轴和输出数组的某个轴的长度相同或，某个轴的长度为1时，这个数组能被用来计算，否则出错\n- 当输入数组的某个轴的长度为1时，沿此轴运算时都用此轴上的第一组值","slug":"Numpy学习笔记","published":1,"updated":"2021-12-27T02:07:48.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxo1kfkw0005dwtf6whyfw6q","content":"<h1 id=\"numpy学习笔记\"><a class=\"markdownIt-Anchor\" href=\"#numpy学习笔记\"></a> Numpy学习笔记</h1>\n<h2 id=\"1-生成numpy数组\"><a class=\"markdownIt-Anchor\" href=\"#1-生成numpy数组\"></a> 1. 生成Numpy数组</h2>\n<h3 id=\"11-从已有数据中创建数组\"><a class=\"markdownIt-Anchor\" href=\"#11-从已有数据中创建数组\"></a> 1.1 从已有数据中创建数组</h3>\n<ul>\n<li>将列表转换成ndarray</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">lst1 = [<span class=\"number\">3.14</span>, <span class=\"number\">2.17</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">nd1 = np.array(lst1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(nd1))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[3.14 2.17 1.   2.   3.  ]</span><br><span class=\"line\">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>嵌套列表可以转换为多维ndarray</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst2 = [lst1,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]]</span><br><span class=\"line\">nd2 = np.array(lst2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(nd2))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[3.14 2.17 1.   2.   3.  ]</span><br><span class=\"line\"> [1.   2.   3.   4.   5.  ]]</span><br><span class=\"line\">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br></pre></td></tr></table></figure>\n<p>将上面列表转换为元组同样适用</p>\n<h3 id=\"12-利用random模块生成数据\"><a class=\"markdownIt-Anchor\" href=\"#12-利用random模块生成数据\"></a> 1.2 利用random模块生成数据</h3>\n<blockquote>\n<p>在深度学习中，我们经常需要对一些参数进行初始化，因此为了更有效地训练模型，提高模型的性能，有些初始化还需要满足一定的条件，比如满足正态分布或者均匀分布等</p>\n</blockquote>\n<ul>\n<li>np.random.random: 生成0到1之间的随机数</li>\n<li>np.random.uniform: 生成均匀分布的随机数</li>\n<li>np.random.randn: 生成标准正太的随机数</li>\n<li>np.random.randint: 生成随机的整数</li>\n<li>np.random.normal: 生成正太分布</li>\n<li>np.random.shuffle: 随机打乱顺序</li>\n<li>np.random.seed: 设置随机种子数</li>\n<li>random_sample: 生成随机的浮点数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nd3 = np.random.random([<span class=\"number\">3</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd3)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[0.31219192 0.28280657 0.69562286]</span><br><span class=\"line\"> [0.29565657 0.06571726 0.89714922]</span><br><span class=\"line\"> [0.22436833 0.03590968 0.86430496]]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;nd3的形状为：&quot;</span>,nd3.shape)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd3的形状为： (<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>为了每次生成同一份数据，可以指定一个随机种子，使用shuffle函数打乱生成的随机数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">np.random.seed(<span class=\"number\">123</span>)</span><br><span class=\"line\">nd4 = np.random.randn(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd4)</span><br><span class=\"line\">np.random.shuffle(nd4)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;随机打乱后数据:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd4)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(nd4))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[-1.0856306   0.99734545  0.2829785 ]</span><br><span class=\"line\"> [-1.50629471 -0.57860025  1.65143654]]</span><br><span class=\"line\">随机打乱后数据:</span><br><span class=\"line\">[[-1.50629471 -0.57860025  1.65143654]</span><br><span class=\"line\"> [-1.0856306   0.99734545  0.2829785 ]]</span><br><span class=\"line\">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-创建特定形状的一维数组\"><a class=\"markdownIt-Anchor\" href=\"#13-创建特定形状的一维数组\"></a> 1.3 创建特定形状的一维数组</h3>\n<blockquote>\n<p>参数初始化时，有时需要生成一些特殊的矩阵，如全是0或全是1的数组或矩阵，这时，可以利用<code>np.zeros</code>，<code>np.ones</code>,<code>np.diag</code>来实现</p>\n</blockquote>\n<p><img src=\"attachment:IMG_0360.PNG\" alt=\"IMG_0360.PNG\" /></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成全是0的3*3的矩阵</span></span><br><span class=\"line\">nd5 = np.zeros([<span class=\"number\">3</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\"># 生成nd5形状一样的全是0的矩阵</span></span><br><span class=\"line\">nd6 = np.zeros_like(nd5)</span><br><span class=\"line\"><span class=\"comment\"># 生成全是1的3*3的矩阵</span></span><br><span class=\"line\">nd7 = np.ones([<span class=\"number\">3</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\"># 生成3阶单位矩阵</span></span><br><span class=\"line\">nd8 = np.eye(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 生成3阶对角矩阵</span></span><br><span class=\"line\">nd9 = np.diag([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(nd5)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd6)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd7)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd8)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd9)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[0. 0. 0.]</span><br><span class=\"line\"> [0. 0. 0.]</span><br><span class=\"line\"> [0. 0. 0.]]</span><br><span class=\"line\">[[0. 0. 0.]</span><br><span class=\"line\"> [0. 0. 0.]</span><br><span class=\"line\"> [0. 0. 0.]]</span><br><span class=\"line\">[[1. 1. 1.]</span><br><span class=\"line\"> [1. 1. 1.]</span><br><span class=\"line\"> [1. 1. 1.]]</span><br><span class=\"line\">[[1. 0. 0.]</span><br><span class=\"line\"> [0. 1. 0.]</span><br><span class=\"line\"> [0. 0. 1.]]</span><br><span class=\"line\">[[1 0 0]</span><br><span class=\"line\"> [0 2 0]</span><br><span class=\"line\"> [0 0 3]]</span><br></pre></td></tr></table></figure>\n<p>有时，需要把生成的矩阵暂时保存起来以备后续使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nd10 = np.random.random([<span class=\"number\">5</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\">np.savetxt(X=nd10,fname=<span class=\"string\">&quot;./test1.txt&quot;</span>)</span><br><span class=\"line\">nd11 = np.loadtxt(<span class=\"string\">&#x27;./test1.txt&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd11)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[0.41092437 0.5796943  0.13995076 0.40101756 0.62731701]</span><br><span class=\"line\"> [0.32415089 0.24475928 0.69475518 0.5939024  0.63179202]</span><br><span class=\"line\"> [0.44025718 0.08372648 0.71233018 0.42786349 0.2977805 ]</span><br><span class=\"line\"> [0.49208478 0.74029639 0.35772892 0.41720995 0.65472131]</span><br><span class=\"line\"> [0.37380143 0.23451288 0.98799529 0.76599595 0.77700444]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"14-利用arangelinspace函数生成数组\"><a class=\"markdownIt-Anchor\" href=\"#14-利用arangelinspace函数生成数组\"></a> 1.4 利用arange/linspace函数生成数组</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(np.arange(<span class=\"number\">10</span>)) <span class=\"comment\"># start=0, stop=10, step=1</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0 1 2 3 4 5 6 7 8 9]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(np.arange(<span class=\"number\">0</span>,<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0 1 2 3 4 5 6 7 8 9]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(np.arange(<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">0.5</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1.  1.5 2.  2.5 3.  3.5]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(np.arange(<span class=\"number\">9</span>,-<span class=\"number\">1</span>,-<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[9 8 7 6 5 4 3 2 1 0]</span><br></pre></td></tr></table></figure>\n<p>linspace可以根据输入的指定数据范围以及等分数量，自动生成一个线性等分向量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(np.linspace(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>)) <span class=\"comment\"># 步长=(1-0)/9</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0.         0.11111111 0.22222222 0.33333333 0.44444444 0.55555556</span><br><span class=\"line\"> 0.66666667 0.77777778 0.88888889 1.        ]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(np.linspace(<span class=\"number\">0.1</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(np.logspace(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ 1.          1.29154967  1.66810054  2.15443469  2.7825594   3.59381366</span><br><span class=\"line\">  4.64158883  5.9948425   7.74263683 10.        ]</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-获取元素\"><a class=\"markdownIt-Anchor\" href=\"#2-获取元素\"></a> 2. 获取元素</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">np.random.seed(<span class=\"number\">2019</span>)</span><br><span class=\"line\">nd12 = np.random.random([<span class=\"number\">10</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt;ndarray: \\n&quot;</span>,nd12)</span><br><span class=\"line\"><span class=\"comment\"># 获取指定位置的数据，获取第4个元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt;第4个元素: \\n&quot;</span>,nd12[<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\"># 截取一段数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt;第4到第6个元素：&quot;</span>,nd12[<span class=\"number\">3</span>:<span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt;截取固定间隔的数据：\\n&quot;</span>,nd12[<span class=\"number\">1</span>:<span class=\"number\">6</span>:<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt;倒序取数: \\n&quot;</span>,nd12[::-<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt;截取一个多维数组的一个区域内的数据：&quot;</span>)</span><br><span class=\"line\">nd13 = np.arange(<span class=\"number\">25</span>).reshape([<span class=\"number\">5</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd13[<span class=\"number\">1</span>:<span class=\"number\">3</span>,<span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt;截取一个多维数组中，数值在一个值域之内的数据：&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd13[(nd13&gt;<span class=\"number\">3</span>)&amp;(nd13&lt;<span class=\"number\">10</span>)])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt;截取多维数组中，指定的列，如读取第2，3列：&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd13[:,<span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;ndarray: </span><br><span class=\"line\"> [0.90348221 0.39308051 0.62396996 0.6378774  0.88049907 0.29917202</span><br><span class=\"line\"> 0.70219827 0.90320616 0.88138193 0.4057498 ]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;第4个元素: </span><br><span class=\"line\"> 0.6378774010222266</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;第4到第6个元素： [0.6378774  0.88049907 0.29917202]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;截取固定间隔的数据：</span><br><span class=\"line\"> [0.39308051 0.6378774  0.29917202]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;倒序取数: </span><br><span class=\"line\"> [0.4057498  0.90320616 0.29917202 0.6378774  0.39308051]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;截取一个多维数组的一个区域内的数据：</span><br><span class=\"line\">[[ 6  7]</span><br><span class=\"line\"> [11 12]]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;截取一个多维数组中，数值在一个值域之内的数据：</span><br><span class=\"line\">[4 5 6 7 8 9]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;截取多维数组中，指定的列，如读取第2，3列：</span><br><span class=\"line\">[[ 1  2]</span><br><span class=\"line\"> [ 6  7]</span><br><span class=\"line\"> [11 12]</span><br><span class=\"line\"> [16 17]</span><br><span class=\"line\"> [21 22]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>获取ndarray中的部分元素，除了通过指定的索引标签来实现外，还可以通过使用一些函数来实现，如通过<code>random.choice</code>函数从指定的样本中随机抽取数据</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> random <span class=\"keyword\">as</span> nr</span><br><span class=\"line\">a = np.arange(<span class=\"number\">1</span>,<span class=\"number\">25</span>,dtype=<span class=\"built_in\">float</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt; a: \\n&quot;</span>,a)</span><br><span class=\"line\">c1 = nr.choice(a, size=(<span class=\"number\">3</span>,<span class=\"number\">4</span>)) <span class=\"comment\">#size指定输出数组形状</span></span><br><span class=\"line\">c2 = nr.choice(a, size=(<span class=\"number\">3</span>,<span class=\"number\">4</span>), replace=<span class=\"literal\">False</span>) <span class=\"comment\"># replace默认为Ture，即可重复抽取</span></span><br><span class=\"line\">c3 = nr.choice(a, size=(<span class=\"number\">3</span>,<span class=\"number\">4</span>), p=a/np.<span class=\"built_in\">sum</span>(a)) <span class=\"comment\"># p为每个元素对应的抽取概率，缺省为每个元素被抽取的概率相同</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt; 随机可重复抽取：\\n&quot;</span>,c1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt; 随机不可重复抽取：\\n&quot;</span>,c2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt; 随机但按制度概率抽取：\\n&quot;</span>,c3)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a: </span><br><span class=\"line\"> [ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17. 18.</span><br><span class=\"line\"> 19. 20. 21. 22. 23. 24.]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; 随机可重复抽取：</span><br><span class=\"line\"> [[16. 15. 18. 18.]</span><br><span class=\"line\"> [14. 18. 18. 14.]</span><br><span class=\"line\"> [23. 16. 13.  3.]]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; 随机不可重复抽取：</span><br><span class=\"line\"> [[ 6. 14.  7.  4.]</span><br><span class=\"line\"> [19.  2.  3. 16.]</span><br><span class=\"line\"> [12. 10.  9. 20.]]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; 随机但按制度概率抽取：</span><br><span class=\"line\"> [[24. 15. 23. 16.]</span><br><span class=\"line\"> [ 9.  9. 17. 19.]</span><br><span class=\"line\"> [23. 13. 12. 17.]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"3numpy的算术运算\"><a class=\"markdownIt-Anchor\" href=\"#3numpy的算术运算\"></a> 3.Numpy的算术运算</h2>\n<h3 id=\"31-对应元素相乘element-wise-product\"><a class=\"markdownIt-Anchor\" href=\"#31-对应元素相乘element-wise-product\"></a> 3.1 对应元素相乘（Element-Wise Product)</h3>\n<p>对应元素相乘是矩阵中对应位置元素的乘积<br><br />\n<code>np.multiply</code>函数用于数组或矩阵对应元素相乘，输出与相乘数组或矩阵的大小一致</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">A = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[-<span class=\"number\">1</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\">B = np.array([[<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt; A*B: &quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(A*B)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt; np.multiply: &quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(np.multiply(A,B))</span><br><span class=\"line\"><span class=\"comment\"># ndarray与标量相乘，广播机制</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt; A*2.0:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(A*<span class=\"number\">2.0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt; A/2.0:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(A/<span class=\"number\">2.0</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; A*B: </span><br><span class=\"line\">[[ 2  0]</span><br><span class=\"line\"> [-3 16]]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; np.multiply: </span><br><span class=\"line\">[[ 2  0]</span><br><span class=\"line\"> [-3 16]]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; A*2.0:</span><br><span class=\"line\">[[ 2.  4.]</span><br><span class=\"line\"> [-2.  8.]]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; A/2.0:</span><br><span class=\"line\">[[ 0.5  1. ]</span><br><span class=\"line\"> [-0.5  2. ]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>因此，推而广之，数组通过一些 激活函数 后，输出与输入形状一致</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">softmoid</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>/(<span class=\"number\">1</span>+np.exp(-x))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">relu</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.maximum(<span class=\"number\">0</span>,x)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">softmax</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.exp(x)/np.<span class=\"built_in\">sum</span>(np.exp(x))</span><br><span class=\"line\"></span><br><span class=\"line\">X = np.random.rand(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入参数X的形状：&quot;</span>,X.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;激活函数softmoid输出形状：&quot;</span>,softmoid(X).shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;激活函数relu输出形状：&quot;</span>,relu(X).shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;激活函数softmax输出形状：&quot;</span>,softmax(X).shape)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入参数X的形状： (2, 3)</span><br><span class=\"line\">激活函数softmoid输出形状： (2, 3)</span><br><span class=\"line\">激活函数relu输出形状： (2, 3)</span><br><span class=\"line\">激活函数softmax输出形状： (2, 3)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"32-点积运算\"><a class=\"markdownIt-Anchor\" href=\"#32-点积运算\"></a> 3.2 点积运算</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X1 = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\">X2 = np.array([[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>],[<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]])</span><br><span class=\"line\">X3 = np.dot(X1,X2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(X3)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[21 24 27]</span><br><span class=\"line\"> [47 54 61]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-数组变形\"><a class=\"markdownIt-Anchor\" href=\"#4-数组变形\"></a> 4. 数组变形</h2>\n<h3 id=\"41-更改数组形状\"><a class=\"markdownIt-Anchor\" href=\"#41-更改数组形状\"></a> 4.1 更改数组形状</h3>\n<h4 id=\"reshape\"><a class=\"markdownIt-Anchor\" href=\"#reshape\"></a> reshape</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原始：&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br><span class=\"line\"><span class=\"comment\"># 将向量 arr 维度变换为2行5列</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;reshape：&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.reshape(<span class=\"number\">2</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"comment\"># 指定维度时，可以只指定行数或者列数，其它用-1代替</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.reshape(<span class=\"number\">5</span>,-<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.reshape(-<span class=\"number\">1</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.reshape(<span class=\"number\">3</span>,<span class=\"number\">6</span>)) <span class=\"comment\"># ＥＲＲＯＲ：必须要符合原始向量的元素个数，即不能更改原始</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原始：</span><br><span class=\"line\">[0 1 2 3 4 5 6 7 8 9]</span><br><span class=\"line\">reshape：</span><br><span class=\"line\">[[0 1 2 3 4]</span><br><span class=\"line\"> [5 6 7 8 9]]</span><br><span class=\"line\">[[0 1]</span><br><span class=\"line\"> [2 3]</span><br><span class=\"line\"> [4 5]</span><br><span class=\"line\"> [6 7]</span><br><span class=\"line\"> [8 9]]</span><br><span class=\"line\">[[0 1 2 3 4]</span><br><span class=\"line\"> [5 6 7 8 9]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">ValueError                                Traceback (most recent call last)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ipython-input-7-1df85e490da8&gt; in &lt;module&gt;</span><br><span class=\"line\">      9 print(arr.reshape(5,-1))</span><br><span class=\"line\">     10 print(arr.reshape(-1,5))</span><br><span class=\"line\">---&gt; 11 print(arr.reshape(3,6))</span><br><span class=\"line\">ValueError: cannot reshape array of size 10 into shape (3,6)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"resize\"><a class=\"markdownIt-Anchor\" href=\"#resize\"></a> resize</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br><span class=\"line\"><span class=\"comment\"># 将向量 arr 维度变换为2行5列</span></span><br><span class=\"line\">arr.resize(<span class=\"number\">2</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br><span class=\"line\">arr.resize(<span class=\"number\">3</span>,<span class=\"number\">6</span>)<span class=\"comment\"># 更改了向量</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0 1 2 3 4 5 6 7 8 9]</span><br><span class=\"line\">[[0 1 2 3 4]</span><br><span class=\"line\"> [5 6 7 8 9]]</span><br><span class=\"line\">[[0 1 2 3 4 5]</span><br><span class=\"line\"> [6 7 8 9 0 0]</span><br><span class=\"line\"> [0 0 0 0 0 0]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"向量转置t\"><a class=\"markdownIt-Anchor\" href=\"#向量转置t\"></a> 向量转置（T）</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">12</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\"># 向量为3行4列</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.T)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[ 0  1  2  3]</span><br><span class=\"line\"> [ 4  5  6  7]</span><br><span class=\"line\"> [ 8  9 10 11]]</span><br><span class=\"line\">[[ 0  4  8]</span><br><span class=\"line\"> [ 1  5  9]</span><br><span class=\"line\"> [ 2  6 10]</span><br><span class=\"line\"> [ 3  7 11]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"ravel向量展平\"><a class=\"markdownIt-Anchor\" href=\"#ravel向量展平\"></a> ravel向量展平</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">6</span>).reshape(<span class=\"number\">2</span>,-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;按照列优先，展平&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.ravel(<span class=\"string\">&#x27;F&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;按照行优先，展平&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.ravel())</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[0 1 2]</span><br><span class=\"line\"> [3 4 5]]</span><br><span class=\"line\">按照列优先，展平</span><br><span class=\"line\">[0 3 1 4 2 5]</span><br><span class=\"line\">按照行优先，展平</span><br><span class=\"line\">[0 1 2 3 4 5]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"flatten\"><a class=\"markdownIt-Anchor\" href=\"#flatten\"></a> flatten</h4>\n<p>flatten：把<strong>矩阵</strong>转换为<strong>向量</strong>，这种需求经常出现在<strong>卷积网络</strong>和<strong>全连接层</strong>之间</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">a = np.floor(<span class=\"number\">10</span>*np.random.random((<span class=\"number\">3</span>,<span class=\"number\">4</span>))) <span class=\"comment\"># np.floor(x)：返回小于等于x的最大整数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.flatten())</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[7. 4. 5. 1.]</span><br><span class=\"line\"> [3. 2. 2. 5.]</span><br><span class=\"line\"> [1. 7. 5. 5.]]</span><br><span class=\"line\">[7. 4. 5. 1. 3. 2. 2. 5. 1. 7. 5. 5.]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"squeeze\"><a class=\"markdownIt-Anchor\" href=\"#squeeze\"></a> squeeze</h4>\n<p>squeeze：主要用来<strong>降维</strong>，把矩阵中含1的维度去掉。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">3</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.squeeze().shape)</span><br><span class=\"line\">arr1 = np.arange(<span class=\"number\">6</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr1.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr1.squeeze().shape)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(3, 1)</span><br><span class=\"line\">(3,)</span><br><span class=\"line\">(3, 1, 2, 1)</span><br><span class=\"line\">(3, 2)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"transpose\"><a class=\"markdownIt-Anchor\" href=\"#transpose\"></a> transpose</h4>\n<p>对高维矩阵进行轴对换，在深度学习中经常使用，比如把图片中表示颜色顺序的RGB改成GBR</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr2 = np.arange(<span class=\"number\">24</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr2.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr2.transpose(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>).shape)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(2, 3, 4)</span><br><span class=\"line\">(3, 4, 2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"42-合并数组\"><a class=\"markdownIt-Anchor\" href=\"#42-合并数组\"></a> 4.2 合并数组</h3>\n<ul>\n<li>append、concatenate、stack都有一个<strong>axis</strong>参数，用于控制数组的合并方式是<strong>按行还是按列</strong></li>\n<li>append和concatenate的数组必须有<strong>相同的行数或者列数</strong></li>\n<li>stack,hstack,dstack要求待合并的数组<strong>必须具有相同的形状</strong></li>\n</ul>\n<h4 id=\"append\"><a class=\"markdownIt-Anchor\" href=\"#append\"></a> append</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 合并一维数组：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">a = np.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">b = np.array([<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>])</span><br><span class=\"line\">c = np.append(a, b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1 2 3 4 5 6]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 合并多维数组：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">a = np.arange(<span class=\"number\">4</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">b = np.arange(<span class=\"number\">4</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\"># 按行合并</span></span><br><span class=\"line\">c = np.append(a, b, axis=<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;按行合并后的结果：&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;按行合并后数据的维度：&quot;</span>,c.shape)</span><br><span class=\"line\"><span class=\"comment\"># 按列合并</span></span><br><span class=\"line\">d = np.append(a, b, axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;按列合并后的结果：&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;按列合并后数据的维度：&quot;</span>,d.shape)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">按行合并后的结果：</span><br><span class=\"line\">[[0 1]</span><br><span class=\"line\"> [2 3]</span><br><span class=\"line\"> [0 1]</span><br><span class=\"line\"> [2 3]]</span><br><span class=\"line\">按行合并后数据的维度： (4, 2)</span><br><span class=\"line\">按列合并后的结果：</span><br><span class=\"line\">[[0 1 0 1]</span><br><span class=\"line\"> [2 3 2 3]]</span><br><span class=\"line\">按列合并后数据的维度： (2, 4)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"concatenate\"><a class=\"markdownIt-Anchor\" href=\"#concatenate\"></a> concatenate</h4>\n<p>沿指定轴连接数组或矩阵：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\">b = np.array([[<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</span><br><span class=\"line\">c = np.concatenate((a,b), axis=<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br><span class=\"line\">d = np.concatenate((a,b.T), axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[1 2]</span><br><span class=\"line\"> [3 4]</span><br><span class=\"line\"> [5 6]]</span><br><span class=\"line\">[[1 2 5]</span><br><span class=\"line\"> [3 4 6]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"stack\"><a class=\"markdownIt-Anchor\" href=\"#stack\"></a> stack</h4>\n<p>按指定轴堆叠数组或矩阵</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\">b = np.array([[<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>]])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(np.stack((a,b),axis=<span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[[1 2]</span><br><span class=\"line\">  [3 4]]</span><br><span class=\"line\"></span><br><span class=\"line\"> [[5 6]</span><br><span class=\"line\">  [7 8]]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-批量处理\"><a class=\"markdownIt-Anchor\" href=\"#5-批量处理\"></a> 5. 批量处理</h3>\n<p>在深度学习中，源数据通常都比较大，为了充分利用GPU和Numpy的平行处理优势，往往采用批量处理方法<strong>Mini-Batch</strong><br><br />\n拆分大数据为多个batch的步骤如下：<br></p>\n<ul>\n<li>得到数据集</li>\n<li>随机打乱数据</li>\n<li>定义batch大小</li>\n<li>批处理数据集</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"comment\"># 生成10000个形状为2*3的矩阵</span></span><br><span class=\"line\">data_train = np.random.randn(<span class=\"number\">10000</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># data_train是一个三维矩阵，第一个维度是样本数，第2，3个维度是样本数量</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data_train.shape)</span><br><span class=\"line\"><span class=\"comment\">#打乱这10000条数据</span></span><br><span class=\"line\">np.random.shuffle(data_train)</span><br><span class=\"line\"><span class=\"comment\"># 定义批量大小</span></span><br><span class=\"line\">batch_size = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"comment\"># 进行批处理</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(data_train), batch_size):</span><br><span class=\"line\">    x_batch_sum = np.<span class=\"built_in\">sum</span>(data_train[i:i+batch_size])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;第&#123;&#125;批次，该批次的数据之和：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(i,x_batch_sum))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(10000, 2, 3)</span><br><span class=\"line\">第0批次，该批次的数据之和：55.435104077411005</span><br><span class=\"line\">第100批次，该批次的数据之和：-30.16163984034822</span><br><span class=\"line\">第200批次，该批次的数据之和：-16.005886476247337</span><br><span class=\"line\">第300批次，该批次的数据之和：26.243420914316697</span><br><span class=\"line\">第400批次，该批次的数据之和：54.09272512386492</span><br><span class=\"line\">第500批次，该批次的数据之和：10.666172638549797</span><br><span class=\"line\">第600批次，该批次的数据之和：-7.4524338126181195</span><br><span class=\"line\">第700批次，该批次的数据之和：16.35508797187559</span><br><span class=\"line\">第800批次，该批次的数据之和：-31.156485946418083</span><br><span class=\"line\">第900批次，该批次的数据之和：-30.958781413477553</span><br><span class=\"line\">第1000批次，该批次的数据之和：-17.74687318011051</span><br><span class=\"line\">第1100批次，该批次的数据之和：-13.155419825123367</span><br><span class=\"line\">第1200批次，该批次的数据之和：36.62068018330997</span><br><span class=\"line\">第1300批次，该批次的数据之和：-9.52610840971721</span><br><span class=\"line\">第1400批次，该批次的数据之和：40.124990215128086</span><br><span class=\"line\">第1500批次，该批次的数据之和：-8.641718267773296</span><br><span class=\"line\">第1600批次，该批次的数据之和：29.490956639761517</span><br><span class=\"line\">第1700批次，该批次的数据之和：-18.545788043979094</span><br><span class=\"line\">第1800批次，该批次的数据之和：6.016028361267317</span><br><span class=\"line\">第1900批次，该批次的数据之和：-18.466307499414476</span><br><span class=\"line\">第2000批次，该批次的数据之和：37.212642842831734</span><br><span class=\"line\">第2100批次，该批次的数据之和：3.2911450511959117</span><br><span class=\"line\">第2200批次，该批次的数据之和：-41.99494902396746</span><br><span class=\"line\">第2300批次，该批次的数据之和：1.2948216575668532</span><br><span class=\"line\">第2400批次，该批次的数据之和：-71.43580130811536</span><br><span class=\"line\">第2500批次，该批次的数据之和：17.87735900883432</span><br><span class=\"line\">第2600批次，该批次的数据之和：37.67664694792802</span><br><span class=\"line\">第2700批次，该批次的数据之和：-7.55997209759624</span><br><span class=\"line\">第2800批次，该批次的数据之和：30.914571710543747</span><br><span class=\"line\">第2900批次，该批次的数据之和：-10.18189132360644</span><br><span class=\"line\">第3000批次，该批次的数据之和：-30.671382196814438</span><br><span class=\"line\">第3100批次，该批次的数据之和：-0.23187480748789113</span><br><span class=\"line\">第3200批次，该批次的数据之和：12.554362924197958</span><br><span class=\"line\">第3300批次，该批次的数据之和：-53.21534337519745</span><br><span class=\"line\">第3400批次，该批次的数据之和：-26.583560593560733</span><br><span class=\"line\">第3500批次，该批次的数据之和：-23.963057796830483</span><br><span class=\"line\">第3600批次，该批次的数据之和：-20.135410853277417</span><br><span class=\"line\">第3700批次，该批次的数据之和：38.023911057082785</span><br><span class=\"line\">第3800批次，该批次的数据之和：-13.32064222612313</span><br><span class=\"line\">第3900批次，该批次的数据之和：-6.889328224640572</span><br><span class=\"line\">第4000批次，该批次的数据之和：-31.01990202931473</span><br><span class=\"line\">第4100批次，该批次的数据之和：-27.84137706109179</span><br><span class=\"line\">第4200批次，该批次的数据之和：33.49698637790293</span><br><span class=\"line\">第4300批次，该批次的数据之和：12.212554187171982</span><br><span class=\"line\">第4400批次，该批次的数据之和：3.512815856108185</span><br><span class=\"line\">第4500批次，该批次的数据之和：-4.260687424492915</span><br><span class=\"line\">第4600批次，该批次的数据之和：35.48174080841822</span><br><span class=\"line\">第4700批次，该批次的数据之和：47.11583122229985</span><br><span class=\"line\">第4800批次，该批次的数据之和：35.11652490662901</span><br><span class=\"line\">第4900批次，该批次的数据之和：6.923124673929591</span><br><span class=\"line\">第5000批次，该批次的数据之和：-0.9601519043571036</span><br><span class=\"line\">第5100批次，该批次的数据之和：31.40795018298309</span><br><span class=\"line\">第5200批次，该批次的数据之和：-14.370508039492375</span><br><span class=\"line\">第5300批次，该批次的数据之和：2.0080627697661484</span><br><span class=\"line\">第5400批次，该批次的数据之和：49.9423922559288</span><br><span class=\"line\">第5500批次，该批次的数据之和：1.5986276917534745</span><br><span class=\"line\">第5600批次，该批次的数据之和：-14.292559911652749</span><br><span class=\"line\">第5700批次，该批次的数据之和：9.269236636816146</span><br><span class=\"line\">第5800批次，该批次的数据之和：35.261939078135256</span><br><span class=\"line\">第5900批次，该批次的数据之和：21.40686158271405</span><br><span class=\"line\">第6000批次，该批次的数据之和：63.72421750904502</span><br><span class=\"line\">第6100批次，该批次的数据之和：-4.449162479660419</span><br><span class=\"line\">第6200批次，该批次的数据之和：-12.87971193486877</span><br><span class=\"line\">第6300批次，该批次的数据之和：16.739166846569468</span><br><span class=\"line\">第6400批次，该批次的数据之和：15.507139793752685</span><br><span class=\"line\">第6500批次，该批次的数据之和：28.237722121881088</span><br><span class=\"line\">第6600批次，该批次的数据之和：19.428664862631027</span><br><span class=\"line\">第6700批次，该批次的数据之和：15.736081688984164</span><br><span class=\"line\">第6800批次，该批次的数据之和：-12.159796741250288</span><br><span class=\"line\">第6900批次，该批次的数据之和：28.296243694838907</span><br><span class=\"line\">第7000批次，该批次的数据之和：7.500594716026612</span><br><span class=\"line\">第7100批次，该批次的数据之和：4.654555617783968</span><br><span class=\"line\">第7200批次，该批次的数据之和：-8.868369636944283</span><br><span class=\"line\">第7300批次，该批次的数据之和：-38.15820793655656</span><br><span class=\"line\">第7400批次，该批次的数据之和：18.964283594574983</span><br><span class=\"line\">第7500批次，该批次的数据之和：-11.955730060930211</span><br><span class=\"line\">第7600批次，该批次的数据之和：-2.8986304404518926</span><br><span class=\"line\">第7700批次，该批次的数据之和：35.34306520647606</span><br><span class=\"line\">第7800批次，该批次的数据之和：12.358253221555003</span><br><span class=\"line\">第7900批次，该批次的数据之和：-30.10571822052315</span><br><span class=\"line\">第8000批次，该批次的数据之和：-46.60238546662976</span><br><span class=\"line\">第8100批次，该批次的数据之和：-14.535660376705316</span><br><span class=\"line\">第8200批次，该批次的数据之和：-32.16956146044525</span><br><span class=\"line\">第8300批次，该批次的数据之和：22.891974055182587</span><br><span class=\"line\">第8400批次，该批次的数据之和：17.937267722718893</span><br><span class=\"line\">第8500批次，该批次的数据之和：-7.5960642210042195</span><br><span class=\"line\">第8600批次，该批次的数据之和：-23.25232489911175</span><br><span class=\"line\">第8700批次，该批次的数据之和：-1.0112532518592268</span><br><span class=\"line\">第8800批次，该批次的数据之和：-53.012638021916835</span><br><span class=\"line\">第8900批次，该批次的数据之和：43.233451389942886</span><br><span class=\"line\">第9000批次，该批次的数据之和：16.00328538980951</span><br><span class=\"line\">第9100批次，该批次的数据之和：52.78228888158892</span><br><span class=\"line\">第9200批次，该批次的数据之和：-21.00762549901342</span><br><span class=\"line\">第9300批次，该批次的数据之和：-21.380219319924976</span><br><span class=\"line\">第9400批次，该批次的数据之和：-25.89993133337054</span><br><span class=\"line\">第9500批次，该批次的数据之和：8.653750464608649</span><br><span class=\"line\">第9600批次，该批次的数据之和：-47.21038400234219</span><br><span class=\"line\">第9700批次，该批次的数据之和：25.37845335924261</span><br><span class=\"line\">第9800批次，该批次的数据之和：-14.943652726871015</span><br><span class=\"line\">第9900批次，该批次的数据之和：6.466367180724267</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-通用函数\"><a class=\"markdownIt-Anchor\" href=\"#6-通用函数\"></a> 6. 通用函数</h3>\n<p>Numpy提供两种基本的对象，即<strong>ndarray和ufunc对象</strong><br><br />\nufunc是一种能对数组中每个元素进行操作的函数<br></p>\n<h4 id=\"math与numpy函数的对比\"><a class=\"markdownIt-Anchor\" href=\"#math与numpy函数的对比\"></a> Math与Numpy函数的对比</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">x = [i*<span class=\"number\">0.001</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.arange(<span class=\"number\">1000000</span>)]</span><br><span class=\"line\">start = time.clock()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, t <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(x):</span><br><span class=\"line\">    x[i] = math.sin(t)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;math.sin:&quot;</span>, time.clock()-start)</span><br><span class=\"line\">x = [i*<span class=\"number\">0.001</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.arange(<span class=\"number\">1000000</span>)]</span><br><span class=\"line\">x = np.array(x)</span><br><span class=\"line\">start = time.clock()</span><br><span class=\"line\">np.sin(x) <span class=\"comment\"># numpy可以并行计算，不用循环</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;numpy.sin:&quot;</span>,time.clock()-start)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.sin: 0.5838227</span><br><span class=\"line\">numpy.sin: 0.032238599999999895</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>由此可见，numpy比math快10倍左右</p>\n<h4 id=\"循环和向量运算比较\"><a class=\"markdownIt-Anchor\" href=\"#循环和向量运算比较\"></a> 循环和向量运算比较</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">x1 = np.random.rand(<span class=\"number\">1000000</span>)</span><br><span class=\"line\">x2 = np.random.rand(<span class=\"number\">1000000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 使用循环计算向量的点积</span></span><br><span class=\"line\">tic = time.process_time() <span class=\"comment\"># 计算程序所用时间</span></span><br><span class=\"line\">dot = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(x1)):</span><br><span class=\"line\">    dot += x1[i]*x2[i]</span><br><span class=\"line\">toc = time.process_time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;dot = &quot;</span>+<span class=\"built_in\">str</span>(dot)+<span class=\"string\">&quot;\\nfor loop----- Computation time = &quot;</span>+<span class=\"built_in\">str</span>(<span class=\"number\">1000</span>*(toc-tic))+<span class=\"string\">&quot;ms&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">##使用numpy函数求点积</span></span><br><span class=\"line\">tic = time.process_time()</span><br><span class=\"line\">dot = <span class=\"number\">0</span></span><br><span class=\"line\">dot = np.dot(x1,x2)</span><br><span class=\"line\">toc = time.process_time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;dot = &quot;</span>+<span class=\"built_in\">str</span>(dot)+<span class=\"string\">&quot;\\nvector version----- Compution time = &quot;</span>+<span class=\"built_in\">str</span>(<span class=\"number\">1000</span>*(toc-tic))+<span class=\"string\">&quot;ms&quot;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dot = 249573.00014043407</span><br><span class=\"line\">for loop----- Computation time = 890.625ms</span><br><span class=\"line\">dot = 249573.0001404432</span><br><span class=\"line\">vector version----- Compution time = 31.25ms</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在深度学习算法中，一般都使用向量化矩阵进行运算</p>\n<h3 id=\"7-广播机制\"><a class=\"markdownIt-Anchor\" href=\"#7-广播机制\"></a> 7. 广播机制</h3>\n<p>Numpy的ufunc中要求输入数组是一致的,当数组的<strong>shape不相等</strong>时，则会使用<strong>广播机制</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np </span><br><span class=\"line\">A = np.arange(<span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">10</span>).reshape(<span class=\"number\">4</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">B = np.arange(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;A矩阵的形状：&#123;&#125;，B矩阵的形状：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(A.shape, B.shape))</span><br><span class=\"line\">C = A+B</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;C矩阵的形状：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(C.shape))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(C)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A矩阵的形状：(4, 1)，B矩阵的形状：(3,)</span><br><span class=\"line\">C矩阵的形状：(4, 3)</span><br><span class=\"line\">[[ 0  1  2]</span><br><span class=\"line\"> [10 11 12]</span><br><span class=\"line\"> [20 21 22]</span><br><span class=\"line\"> [30 31 32]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>广播机制的生效规则：</p>\n<ul>\n<li>所有输入数组都向其中shape最长的数组看齐，不足的部分通过在前面补1</li>\n<li>输出数组的shape是输入数组shape的各个轴上的最大值</li>\n<li>若输入数组的某个轴和输出数组的某个轴的长度相同或，某个轴的长度为1时，这个数组能被用来计算，否则出错</li>\n<li>当输入数组的某个轴的长度为1时，沿此轴运算时都用此轴上的第一组值</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"numpy学习笔记\"><a class=\"markdownIt-Anchor\" href=\"#numpy学习笔记\"></a> Numpy学习笔记</h1>\n<h2 id=\"1-生成numpy数组\"><a class=\"markdownIt-Anchor\" href=\"#1-生成numpy数组\"></a> 1. 生成Numpy数组</h2>\n<h3 id=\"11-从已有数据中创建数组\"><a class=\"markdownIt-Anchor\" href=\"#11-从已有数据中创建数组\"></a> 1.1 从已有数据中创建数组</h3>\n<ul>\n<li>将列表转换成ndarray</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">lst1 = [<span class=\"number\">3.14</span>, <span class=\"number\">2.17</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">nd1 = np.array(lst1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(nd1))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[3.14 2.17 1.   2.   3.  ]</span><br><span class=\"line\">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>嵌套列表可以转换为多维ndarray</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst2 = [lst1,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]]</span><br><span class=\"line\">nd2 = np.array(lst2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(nd2))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[3.14 2.17 1.   2.   3.  ]</span><br><span class=\"line\"> [1.   2.   3.   4.   5.  ]]</span><br><span class=\"line\">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br></pre></td></tr></table></figure>\n<p>将上面列表转换为元组同样适用</p>\n<h3 id=\"12-利用random模块生成数据\"><a class=\"markdownIt-Anchor\" href=\"#12-利用random模块生成数据\"></a> 1.2 利用random模块生成数据</h3>\n<blockquote>\n<p>在深度学习中，我们经常需要对一些参数进行初始化，因此为了更有效地训练模型，提高模型的性能，有些初始化还需要满足一定的条件，比如满足正态分布或者均匀分布等</p>\n</blockquote>\n<ul>\n<li>np.random.random: 生成0到1之间的随机数</li>\n<li>np.random.uniform: 生成均匀分布的随机数</li>\n<li>np.random.randn: 生成标准正太的随机数</li>\n<li>np.random.randint: 生成随机的整数</li>\n<li>np.random.normal: 生成正太分布</li>\n<li>np.random.shuffle: 随机打乱顺序</li>\n<li>np.random.seed: 设置随机种子数</li>\n<li>random_sample: 生成随机的浮点数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nd3 = np.random.random([<span class=\"number\">3</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd3)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[0.31219192 0.28280657 0.69562286]</span><br><span class=\"line\"> [0.29565657 0.06571726 0.89714922]</span><br><span class=\"line\"> [0.22436833 0.03590968 0.86430496]]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;nd3的形状为：&quot;</span>,nd3.shape)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd3的形状为： (<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>为了每次生成同一份数据，可以指定一个随机种子，使用shuffle函数打乱生成的随机数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">np.random.seed(<span class=\"number\">123</span>)</span><br><span class=\"line\">nd4 = np.random.randn(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd4)</span><br><span class=\"line\">np.random.shuffle(nd4)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;随机打乱后数据:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd4)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(nd4))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[-1.0856306   0.99734545  0.2829785 ]</span><br><span class=\"line\"> [-1.50629471 -0.57860025  1.65143654]]</span><br><span class=\"line\">随机打乱后数据:</span><br><span class=\"line\">[[-1.50629471 -0.57860025  1.65143654]</span><br><span class=\"line\"> [-1.0856306   0.99734545  0.2829785 ]]</span><br><span class=\"line\">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-创建特定形状的一维数组\"><a class=\"markdownIt-Anchor\" href=\"#13-创建特定形状的一维数组\"></a> 1.3 创建特定形状的一维数组</h3>\n<blockquote>\n<p>参数初始化时，有时需要生成一些特殊的矩阵，如全是0或全是1的数组或矩阵，这时，可以利用<code>np.zeros</code>，<code>np.ones</code>,<code>np.diag</code>来实现</p>\n</blockquote>\n<p><img src=\"attachment:IMG_0360.PNG\" alt=\"IMG_0360.PNG\" /></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成全是0的3*3的矩阵</span></span><br><span class=\"line\">nd5 = np.zeros([<span class=\"number\">3</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\"># 生成nd5形状一样的全是0的矩阵</span></span><br><span class=\"line\">nd6 = np.zeros_like(nd5)</span><br><span class=\"line\"><span class=\"comment\"># 生成全是1的3*3的矩阵</span></span><br><span class=\"line\">nd7 = np.ones([<span class=\"number\">3</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\"># 生成3阶单位矩阵</span></span><br><span class=\"line\">nd8 = np.eye(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 生成3阶对角矩阵</span></span><br><span class=\"line\">nd9 = np.diag([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(nd5)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd6)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd7)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd8)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd9)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[0. 0. 0.]</span><br><span class=\"line\"> [0. 0. 0.]</span><br><span class=\"line\"> [0. 0. 0.]]</span><br><span class=\"line\">[[0. 0. 0.]</span><br><span class=\"line\"> [0. 0. 0.]</span><br><span class=\"line\"> [0. 0. 0.]]</span><br><span class=\"line\">[[1. 1. 1.]</span><br><span class=\"line\"> [1. 1. 1.]</span><br><span class=\"line\"> [1. 1. 1.]]</span><br><span class=\"line\">[[1. 0. 0.]</span><br><span class=\"line\"> [0. 1. 0.]</span><br><span class=\"line\"> [0. 0. 1.]]</span><br><span class=\"line\">[[1 0 0]</span><br><span class=\"line\"> [0 2 0]</span><br><span class=\"line\"> [0 0 3]]</span><br></pre></td></tr></table></figure>\n<p>有时，需要把生成的矩阵暂时保存起来以备后续使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nd10 = np.random.random([<span class=\"number\">5</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\">np.savetxt(X=nd10,fname=<span class=\"string\">&quot;./test1.txt&quot;</span>)</span><br><span class=\"line\">nd11 = np.loadtxt(<span class=\"string\">&#x27;./test1.txt&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd11)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[0.41092437 0.5796943  0.13995076 0.40101756 0.62731701]</span><br><span class=\"line\"> [0.32415089 0.24475928 0.69475518 0.5939024  0.63179202]</span><br><span class=\"line\"> [0.44025718 0.08372648 0.71233018 0.42786349 0.2977805 ]</span><br><span class=\"line\"> [0.49208478 0.74029639 0.35772892 0.41720995 0.65472131]</span><br><span class=\"line\"> [0.37380143 0.23451288 0.98799529 0.76599595 0.77700444]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"14-利用arangelinspace函数生成数组\"><a class=\"markdownIt-Anchor\" href=\"#14-利用arangelinspace函数生成数组\"></a> 1.4 利用arange/linspace函数生成数组</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(np.arange(<span class=\"number\">10</span>)) <span class=\"comment\"># start=0, stop=10, step=1</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0 1 2 3 4 5 6 7 8 9]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(np.arange(<span class=\"number\">0</span>,<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0 1 2 3 4 5 6 7 8 9]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(np.arange(<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">0.5</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1.  1.5 2.  2.5 3.  3.5]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(np.arange(<span class=\"number\">9</span>,-<span class=\"number\">1</span>,-<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[9 8 7 6 5 4 3 2 1 0]</span><br></pre></td></tr></table></figure>\n<p>linspace可以根据输入的指定数据范围以及等分数量，自动生成一个线性等分向量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(np.linspace(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>)) <span class=\"comment\"># 步长=(1-0)/9</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0.         0.11111111 0.22222222 0.33333333 0.44444444 0.55555556</span><br><span class=\"line\"> 0.66666667 0.77777778 0.88888889 1.        ]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(np.linspace(<span class=\"number\">0.1</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(np.logspace(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ 1.          1.29154967  1.66810054  2.15443469  2.7825594   3.59381366</span><br><span class=\"line\">  4.64158883  5.9948425   7.74263683 10.        ]</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-获取元素\"><a class=\"markdownIt-Anchor\" href=\"#2-获取元素\"></a> 2. 获取元素</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">np.random.seed(<span class=\"number\">2019</span>)</span><br><span class=\"line\">nd12 = np.random.random([<span class=\"number\">10</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt;ndarray: \\n&quot;</span>,nd12)</span><br><span class=\"line\"><span class=\"comment\"># 获取指定位置的数据，获取第4个元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt;第4个元素: \\n&quot;</span>,nd12[<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\"># 截取一段数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt;第4到第6个元素：&quot;</span>,nd12[<span class=\"number\">3</span>:<span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt;截取固定间隔的数据：\\n&quot;</span>,nd12[<span class=\"number\">1</span>:<span class=\"number\">6</span>:<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt;倒序取数: \\n&quot;</span>,nd12[::-<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt;截取一个多维数组的一个区域内的数据：&quot;</span>)</span><br><span class=\"line\">nd13 = np.arange(<span class=\"number\">25</span>).reshape([<span class=\"number\">5</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd13[<span class=\"number\">1</span>:<span class=\"number\">3</span>,<span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt;截取一个多维数组中，数值在一个值域之内的数据：&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd13[(nd13&gt;<span class=\"number\">3</span>)&amp;(nd13&lt;<span class=\"number\">10</span>)])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt;截取多维数组中，指定的列，如读取第2，3列：&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nd13[:,<span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;ndarray: </span><br><span class=\"line\"> [0.90348221 0.39308051 0.62396996 0.6378774  0.88049907 0.29917202</span><br><span class=\"line\"> 0.70219827 0.90320616 0.88138193 0.4057498 ]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;第4个元素: </span><br><span class=\"line\"> 0.6378774010222266</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;第4到第6个元素： [0.6378774  0.88049907 0.29917202]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;截取固定间隔的数据：</span><br><span class=\"line\"> [0.39308051 0.6378774  0.29917202]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;倒序取数: </span><br><span class=\"line\"> [0.4057498  0.90320616 0.29917202 0.6378774  0.39308051]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;截取一个多维数组的一个区域内的数据：</span><br><span class=\"line\">[[ 6  7]</span><br><span class=\"line\"> [11 12]]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;截取一个多维数组中，数值在一个值域之内的数据：</span><br><span class=\"line\">[4 5 6 7 8 9]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;截取多维数组中，指定的列，如读取第2，3列：</span><br><span class=\"line\">[[ 1  2]</span><br><span class=\"line\"> [ 6  7]</span><br><span class=\"line\"> [11 12]</span><br><span class=\"line\"> [16 17]</span><br><span class=\"line\"> [21 22]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>获取ndarray中的部分元素，除了通过指定的索引标签来实现外，还可以通过使用一些函数来实现，如通过<code>random.choice</code>函数从指定的样本中随机抽取数据</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> random <span class=\"keyword\">as</span> nr</span><br><span class=\"line\">a = np.arange(<span class=\"number\">1</span>,<span class=\"number\">25</span>,dtype=<span class=\"built_in\">float</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt; a: \\n&quot;</span>,a)</span><br><span class=\"line\">c1 = nr.choice(a, size=(<span class=\"number\">3</span>,<span class=\"number\">4</span>)) <span class=\"comment\">#size指定输出数组形状</span></span><br><span class=\"line\">c2 = nr.choice(a, size=(<span class=\"number\">3</span>,<span class=\"number\">4</span>), replace=<span class=\"literal\">False</span>) <span class=\"comment\"># replace默认为Ture，即可重复抽取</span></span><br><span class=\"line\">c3 = nr.choice(a, size=(<span class=\"number\">3</span>,<span class=\"number\">4</span>), p=a/np.<span class=\"built_in\">sum</span>(a)) <span class=\"comment\"># p为每个元素对应的抽取概率，缺省为每个元素被抽取的概率相同</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt; 随机可重复抽取：\\n&quot;</span>,c1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt; 随机不可重复抽取：\\n&quot;</span>,c2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt; 随机但按制度概率抽取：\\n&quot;</span>,c3)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a: </span><br><span class=\"line\"> [ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17. 18.</span><br><span class=\"line\"> 19. 20. 21. 22. 23. 24.]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; 随机可重复抽取：</span><br><span class=\"line\"> [[16. 15. 18. 18.]</span><br><span class=\"line\"> [14. 18. 18. 14.]</span><br><span class=\"line\"> [23. 16. 13.  3.]]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; 随机不可重复抽取：</span><br><span class=\"line\"> [[ 6. 14.  7.  4.]</span><br><span class=\"line\"> [19.  2.  3. 16.]</span><br><span class=\"line\"> [12. 10.  9. 20.]]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; 随机但按制度概率抽取：</span><br><span class=\"line\"> [[24. 15. 23. 16.]</span><br><span class=\"line\"> [ 9.  9. 17. 19.]</span><br><span class=\"line\"> [23. 13. 12. 17.]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"3numpy的算术运算\"><a class=\"markdownIt-Anchor\" href=\"#3numpy的算术运算\"></a> 3.Numpy的算术运算</h2>\n<h3 id=\"31-对应元素相乘element-wise-product\"><a class=\"markdownIt-Anchor\" href=\"#31-对应元素相乘element-wise-product\"></a> 3.1 对应元素相乘（Element-Wise Product)</h3>\n<p>对应元素相乘是矩阵中对应位置元素的乘积<br><br />\n<code>np.multiply</code>函数用于数组或矩阵对应元素相乘，输出与相乘数组或矩阵的大小一致</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">A = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[-<span class=\"number\">1</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\">B = np.array([[<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt; A*B: &quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(A*B)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt; np.multiply: &quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(np.multiply(A,B))</span><br><span class=\"line\"><span class=\"comment\"># ndarray与标量相乘，广播机制</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt; A*2.0:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(A*<span class=\"number\">2.0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&gt;&gt;&gt; A/2.0:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(A/<span class=\"number\">2.0</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; A*B: </span><br><span class=\"line\">[[ 2  0]</span><br><span class=\"line\"> [-3 16]]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; np.multiply: </span><br><span class=\"line\">[[ 2  0]</span><br><span class=\"line\"> [-3 16]]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; A*2.0:</span><br><span class=\"line\">[[ 2.  4.]</span><br><span class=\"line\"> [-2.  8.]]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; A/2.0:</span><br><span class=\"line\">[[ 0.5  1. ]</span><br><span class=\"line\"> [-0.5  2. ]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>因此，推而广之，数组通过一些 激活函数 后，输出与输入形状一致</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">softmoid</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>/(<span class=\"number\">1</span>+np.exp(-x))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">relu</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.maximum(<span class=\"number\">0</span>,x)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">softmax</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.exp(x)/np.<span class=\"built_in\">sum</span>(np.exp(x))</span><br><span class=\"line\"></span><br><span class=\"line\">X = np.random.rand(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入参数X的形状：&quot;</span>,X.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;激活函数softmoid输出形状：&quot;</span>,softmoid(X).shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;激活函数relu输出形状：&quot;</span>,relu(X).shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;激活函数softmax输出形状：&quot;</span>,softmax(X).shape)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入参数X的形状： (2, 3)</span><br><span class=\"line\">激活函数softmoid输出形状： (2, 3)</span><br><span class=\"line\">激活函数relu输出形状： (2, 3)</span><br><span class=\"line\">激活函数softmax输出形状： (2, 3)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"32-点积运算\"><a class=\"markdownIt-Anchor\" href=\"#32-点积运算\"></a> 3.2 点积运算</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X1 = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\">X2 = np.array([[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>],[<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]])</span><br><span class=\"line\">X3 = np.dot(X1,X2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(X3)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[21 24 27]</span><br><span class=\"line\"> [47 54 61]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-数组变形\"><a class=\"markdownIt-Anchor\" href=\"#4-数组变形\"></a> 4. 数组变形</h2>\n<h3 id=\"41-更改数组形状\"><a class=\"markdownIt-Anchor\" href=\"#41-更改数组形状\"></a> 4.1 更改数组形状</h3>\n<h4 id=\"reshape\"><a class=\"markdownIt-Anchor\" href=\"#reshape\"></a> reshape</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原始：&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br><span class=\"line\"><span class=\"comment\"># 将向量 arr 维度变换为2行5列</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;reshape：&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.reshape(<span class=\"number\">2</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"comment\"># 指定维度时，可以只指定行数或者列数，其它用-1代替</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.reshape(<span class=\"number\">5</span>,-<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.reshape(-<span class=\"number\">1</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.reshape(<span class=\"number\">3</span>,<span class=\"number\">6</span>)) <span class=\"comment\"># ＥＲＲＯＲ：必须要符合原始向量的元素个数，即不能更改原始</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原始：</span><br><span class=\"line\">[0 1 2 3 4 5 6 7 8 9]</span><br><span class=\"line\">reshape：</span><br><span class=\"line\">[[0 1 2 3 4]</span><br><span class=\"line\"> [5 6 7 8 9]]</span><br><span class=\"line\">[[0 1]</span><br><span class=\"line\"> [2 3]</span><br><span class=\"line\"> [4 5]</span><br><span class=\"line\"> [6 7]</span><br><span class=\"line\"> [8 9]]</span><br><span class=\"line\">[[0 1 2 3 4]</span><br><span class=\"line\"> [5 6 7 8 9]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">ValueError                                Traceback (most recent call last)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ipython-input-7-1df85e490da8&gt; in &lt;module&gt;</span><br><span class=\"line\">      9 print(arr.reshape(5,-1))</span><br><span class=\"line\">     10 print(arr.reshape(-1,5))</span><br><span class=\"line\">---&gt; 11 print(arr.reshape(3,6))</span><br><span class=\"line\">ValueError: cannot reshape array of size 10 into shape (3,6)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"resize\"><a class=\"markdownIt-Anchor\" href=\"#resize\"></a> resize</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br><span class=\"line\"><span class=\"comment\"># 将向量 arr 维度变换为2行5列</span></span><br><span class=\"line\">arr.resize(<span class=\"number\">2</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br><span class=\"line\">arr.resize(<span class=\"number\">3</span>,<span class=\"number\">6</span>)<span class=\"comment\"># 更改了向量</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0 1 2 3 4 5 6 7 8 9]</span><br><span class=\"line\">[[0 1 2 3 4]</span><br><span class=\"line\"> [5 6 7 8 9]]</span><br><span class=\"line\">[[0 1 2 3 4 5]</span><br><span class=\"line\"> [6 7 8 9 0 0]</span><br><span class=\"line\"> [0 0 0 0 0 0]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"向量转置t\"><a class=\"markdownIt-Anchor\" href=\"#向量转置t\"></a> 向量转置（T）</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">12</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\"># 向量为3行4列</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.T)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[ 0  1  2  3]</span><br><span class=\"line\"> [ 4  5  6  7]</span><br><span class=\"line\"> [ 8  9 10 11]]</span><br><span class=\"line\">[[ 0  4  8]</span><br><span class=\"line\"> [ 1  5  9]</span><br><span class=\"line\"> [ 2  6 10]</span><br><span class=\"line\"> [ 3  7 11]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"ravel向量展平\"><a class=\"markdownIt-Anchor\" href=\"#ravel向量展平\"></a> ravel向量展平</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">6</span>).reshape(<span class=\"number\">2</span>,-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;按照列优先，展平&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.ravel(<span class=\"string\">&#x27;F&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;按照行优先，展平&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.ravel())</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[0 1 2]</span><br><span class=\"line\"> [3 4 5]]</span><br><span class=\"line\">按照列优先，展平</span><br><span class=\"line\">[0 3 1 4 2 5]</span><br><span class=\"line\">按照行优先，展平</span><br><span class=\"line\">[0 1 2 3 4 5]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"flatten\"><a class=\"markdownIt-Anchor\" href=\"#flatten\"></a> flatten</h4>\n<p>flatten：把<strong>矩阵</strong>转换为<strong>向量</strong>，这种需求经常出现在<strong>卷积网络</strong>和<strong>全连接层</strong>之间</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">a = np.floor(<span class=\"number\">10</span>*np.random.random((<span class=\"number\">3</span>,<span class=\"number\">4</span>))) <span class=\"comment\"># np.floor(x)：返回小于等于x的最大整数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.flatten())</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[7. 4. 5. 1.]</span><br><span class=\"line\"> [3. 2. 2. 5.]</span><br><span class=\"line\"> [1. 7. 5. 5.]]</span><br><span class=\"line\">[7. 4. 5. 1. 3. 2. 2. 5. 1. 7. 5. 5.]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"squeeze\"><a class=\"markdownIt-Anchor\" href=\"#squeeze\"></a> squeeze</h4>\n<p>squeeze：主要用来<strong>降维</strong>，把矩阵中含1的维度去掉。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">3</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.squeeze().shape)</span><br><span class=\"line\">arr1 = np.arange(<span class=\"number\">6</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr1.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr1.squeeze().shape)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(3, 1)</span><br><span class=\"line\">(3,)</span><br><span class=\"line\">(3, 1, 2, 1)</span><br><span class=\"line\">(3, 2)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"transpose\"><a class=\"markdownIt-Anchor\" href=\"#transpose\"></a> transpose</h4>\n<p>对高维矩阵进行轴对换，在深度学习中经常使用，比如把图片中表示颜色顺序的RGB改成GBR</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr2 = np.arange(<span class=\"number\">24</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr2.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr2.transpose(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>).shape)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(2, 3, 4)</span><br><span class=\"line\">(3, 4, 2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"42-合并数组\"><a class=\"markdownIt-Anchor\" href=\"#42-合并数组\"></a> 4.2 合并数组</h3>\n<ul>\n<li>append、concatenate、stack都有一个<strong>axis</strong>参数，用于控制数组的合并方式是<strong>按行还是按列</strong></li>\n<li>append和concatenate的数组必须有<strong>相同的行数或者列数</strong></li>\n<li>stack,hstack,dstack要求待合并的数组<strong>必须具有相同的形状</strong></li>\n</ul>\n<h4 id=\"append\"><a class=\"markdownIt-Anchor\" href=\"#append\"></a> append</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 合并一维数组：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">a = np.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">b = np.array([<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>])</span><br><span class=\"line\">c = np.append(a, b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1 2 3 4 5 6]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 合并多维数组：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">a = np.arange(<span class=\"number\">4</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">b = np.arange(<span class=\"number\">4</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\"># 按行合并</span></span><br><span class=\"line\">c = np.append(a, b, axis=<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;按行合并后的结果：&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;按行合并后数据的维度：&quot;</span>,c.shape)</span><br><span class=\"line\"><span class=\"comment\"># 按列合并</span></span><br><span class=\"line\">d = np.append(a, b, axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;按列合并后的结果：&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;按列合并后数据的维度：&quot;</span>,d.shape)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">按行合并后的结果：</span><br><span class=\"line\">[[0 1]</span><br><span class=\"line\"> [2 3]</span><br><span class=\"line\"> [0 1]</span><br><span class=\"line\"> [2 3]]</span><br><span class=\"line\">按行合并后数据的维度： (4, 2)</span><br><span class=\"line\">按列合并后的结果：</span><br><span class=\"line\">[[0 1 0 1]</span><br><span class=\"line\"> [2 3 2 3]]</span><br><span class=\"line\">按列合并后数据的维度： (2, 4)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"concatenate\"><a class=\"markdownIt-Anchor\" href=\"#concatenate\"></a> concatenate</h4>\n<p>沿指定轴连接数组或矩阵：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\">b = np.array([[<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</span><br><span class=\"line\">c = np.concatenate((a,b), axis=<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br><span class=\"line\">d = np.concatenate((a,b.T), axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[1 2]</span><br><span class=\"line\"> [3 4]</span><br><span class=\"line\"> [5 6]]</span><br><span class=\"line\">[[1 2 5]</span><br><span class=\"line\"> [3 4 6]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"stack\"><a class=\"markdownIt-Anchor\" href=\"#stack\"></a> stack</h4>\n<p>按指定轴堆叠数组或矩阵</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\">b = np.array([[<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>]])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(np.stack((a,b),axis=<span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[[1 2]</span><br><span class=\"line\">  [3 4]]</span><br><span class=\"line\"></span><br><span class=\"line\"> [[5 6]</span><br><span class=\"line\">  [7 8]]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-批量处理\"><a class=\"markdownIt-Anchor\" href=\"#5-批量处理\"></a> 5. 批量处理</h3>\n<p>在深度学习中，源数据通常都比较大，为了充分利用GPU和Numpy的平行处理优势，往往采用批量处理方法<strong>Mini-Batch</strong><br><br />\n拆分大数据为多个batch的步骤如下：<br></p>\n<ul>\n<li>得到数据集</li>\n<li>随机打乱数据</li>\n<li>定义batch大小</li>\n<li>批处理数据集</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"comment\"># 生成10000个形状为2*3的矩阵</span></span><br><span class=\"line\">data_train = np.random.randn(<span class=\"number\">10000</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># data_train是一个三维矩阵，第一个维度是样本数，第2，3个维度是样本数量</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data_train.shape)</span><br><span class=\"line\"><span class=\"comment\">#打乱这10000条数据</span></span><br><span class=\"line\">np.random.shuffle(data_train)</span><br><span class=\"line\"><span class=\"comment\"># 定义批量大小</span></span><br><span class=\"line\">batch_size = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"comment\"># 进行批处理</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(data_train), batch_size):</span><br><span class=\"line\">    x_batch_sum = np.<span class=\"built_in\">sum</span>(data_train[i:i+batch_size])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;第&#123;&#125;批次，该批次的数据之和：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(i,x_batch_sum))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(10000, 2, 3)</span><br><span class=\"line\">第0批次，该批次的数据之和：55.435104077411005</span><br><span class=\"line\">第100批次，该批次的数据之和：-30.16163984034822</span><br><span class=\"line\">第200批次，该批次的数据之和：-16.005886476247337</span><br><span class=\"line\">第300批次，该批次的数据之和：26.243420914316697</span><br><span class=\"line\">第400批次，该批次的数据之和：54.09272512386492</span><br><span class=\"line\">第500批次，该批次的数据之和：10.666172638549797</span><br><span class=\"line\">第600批次，该批次的数据之和：-7.4524338126181195</span><br><span class=\"line\">第700批次，该批次的数据之和：16.35508797187559</span><br><span class=\"line\">第800批次，该批次的数据之和：-31.156485946418083</span><br><span class=\"line\">第900批次，该批次的数据之和：-30.958781413477553</span><br><span class=\"line\">第1000批次，该批次的数据之和：-17.74687318011051</span><br><span class=\"line\">第1100批次，该批次的数据之和：-13.155419825123367</span><br><span class=\"line\">第1200批次，该批次的数据之和：36.62068018330997</span><br><span class=\"line\">第1300批次，该批次的数据之和：-9.52610840971721</span><br><span class=\"line\">第1400批次，该批次的数据之和：40.124990215128086</span><br><span class=\"line\">第1500批次，该批次的数据之和：-8.641718267773296</span><br><span class=\"line\">第1600批次，该批次的数据之和：29.490956639761517</span><br><span class=\"line\">第1700批次，该批次的数据之和：-18.545788043979094</span><br><span class=\"line\">第1800批次，该批次的数据之和：6.016028361267317</span><br><span class=\"line\">第1900批次，该批次的数据之和：-18.466307499414476</span><br><span class=\"line\">第2000批次，该批次的数据之和：37.212642842831734</span><br><span class=\"line\">第2100批次，该批次的数据之和：3.2911450511959117</span><br><span class=\"line\">第2200批次，该批次的数据之和：-41.99494902396746</span><br><span class=\"line\">第2300批次，该批次的数据之和：1.2948216575668532</span><br><span class=\"line\">第2400批次，该批次的数据之和：-71.43580130811536</span><br><span class=\"line\">第2500批次，该批次的数据之和：17.87735900883432</span><br><span class=\"line\">第2600批次，该批次的数据之和：37.67664694792802</span><br><span class=\"line\">第2700批次，该批次的数据之和：-7.55997209759624</span><br><span class=\"line\">第2800批次，该批次的数据之和：30.914571710543747</span><br><span class=\"line\">第2900批次，该批次的数据之和：-10.18189132360644</span><br><span class=\"line\">第3000批次，该批次的数据之和：-30.671382196814438</span><br><span class=\"line\">第3100批次，该批次的数据之和：-0.23187480748789113</span><br><span class=\"line\">第3200批次，该批次的数据之和：12.554362924197958</span><br><span class=\"line\">第3300批次，该批次的数据之和：-53.21534337519745</span><br><span class=\"line\">第3400批次，该批次的数据之和：-26.583560593560733</span><br><span class=\"line\">第3500批次，该批次的数据之和：-23.963057796830483</span><br><span class=\"line\">第3600批次，该批次的数据之和：-20.135410853277417</span><br><span class=\"line\">第3700批次，该批次的数据之和：38.023911057082785</span><br><span class=\"line\">第3800批次，该批次的数据之和：-13.32064222612313</span><br><span class=\"line\">第3900批次，该批次的数据之和：-6.889328224640572</span><br><span class=\"line\">第4000批次，该批次的数据之和：-31.01990202931473</span><br><span class=\"line\">第4100批次，该批次的数据之和：-27.84137706109179</span><br><span class=\"line\">第4200批次，该批次的数据之和：33.49698637790293</span><br><span class=\"line\">第4300批次，该批次的数据之和：12.212554187171982</span><br><span class=\"line\">第4400批次，该批次的数据之和：3.512815856108185</span><br><span class=\"line\">第4500批次，该批次的数据之和：-4.260687424492915</span><br><span class=\"line\">第4600批次，该批次的数据之和：35.48174080841822</span><br><span class=\"line\">第4700批次，该批次的数据之和：47.11583122229985</span><br><span class=\"line\">第4800批次，该批次的数据之和：35.11652490662901</span><br><span class=\"line\">第4900批次，该批次的数据之和：6.923124673929591</span><br><span class=\"line\">第5000批次，该批次的数据之和：-0.9601519043571036</span><br><span class=\"line\">第5100批次，该批次的数据之和：31.40795018298309</span><br><span class=\"line\">第5200批次，该批次的数据之和：-14.370508039492375</span><br><span class=\"line\">第5300批次，该批次的数据之和：2.0080627697661484</span><br><span class=\"line\">第5400批次，该批次的数据之和：49.9423922559288</span><br><span class=\"line\">第5500批次，该批次的数据之和：1.5986276917534745</span><br><span class=\"line\">第5600批次，该批次的数据之和：-14.292559911652749</span><br><span class=\"line\">第5700批次，该批次的数据之和：9.269236636816146</span><br><span class=\"line\">第5800批次，该批次的数据之和：35.261939078135256</span><br><span class=\"line\">第5900批次，该批次的数据之和：21.40686158271405</span><br><span class=\"line\">第6000批次，该批次的数据之和：63.72421750904502</span><br><span class=\"line\">第6100批次，该批次的数据之和：-4.449162479660419</span><br><span class=\"line\">第6200批次，该批次的数据之和：-12.87971193486877</span><br><span class=\"line\">第6300批次，该批次的数据之和：16.739166846569468</span><br><span class=\"line\">第6400批次，该批次的数据之和：15.507139793752685</span><br><span class=\"line\">第6500批次，该批次的数据之和：28.237722121881088</span><br><span class=\"line\">第6600批次，该批次的数据之和：19.428664862631027</span><br><span class=\"line\">第6700批次，该批次的数据之和：15.736081688984164</span><br><span class=\"line\">第6800批次，该批次的数据之和：-12.159796741250288</span><br><span class=\"line\">第6900批次，该批次的数据之和：28.296243694838907</span><br><span class=\"line\">第7000批次，该批次的数据之和：7.500594716026612</span><br><span class=\"line\">第7100批次，该批次的数据之和：4.654555617783968</span><br><span class=\"line\">第7200批次，该批次的数据之和：-8.868369636944283</span><br><span class=\"line\">第7300批次，该批次的数据之和：-38.15820793655656</span><br><span class=\"line\">第7400批次，该批次的数据之和：18.964283594574983</span><br><span class=\"line\">第7500批次，该批次的数据之和：-11.955730060930211</span><br><span class=\"line\">第7600批次，该批次的数据之和：-2.8986304404518926</span><br><span class=\"line\">第7700批次，该批次的数据之和：35.34306520647606</span><br><span class=\"line\">第7800批次，该批次的数据之和：12.358253221555003</span><br><span class=\"line\">第7900批次，该批次的数据之和：-30.10571822052315</span><br><span class=\"line\">第8000批次，该批次的数据之和：-46.60238546662976</span><br><span class=\"line\">第8100批次，该批次的数据之和：-14.535660376705316</span><br><span class=\"line\">第8200批次，该批次的数据之和：-32.16956146044525</span><br><span class=\"line\">第8300批次，该批次的数据之和：22.891974055182587</span><br><span class=\"line\">第8400批次，该批次的数据之和：17.937267722718893</span><br><span class=\"line\">第8500批次，该批次的数据之和：-7.5960642210042195</span><br><span class=\"line\">第8600批次，该批次的数据之和：-23.25232489911175</span><br><span class=\"line\">第8700批次，该批次的数据之和：-1.0112532518592268</span><br><span class=\"line\">第8800批次，该批次的数据之和：-53.012638021916835</span><br><span class=\"line\">第8900批次，该批次的数据之和：43.233451389942886</span><br><span class=\"line\">第9000批次，该批次的数据之和：16.00328538980951</span><br><span class=\"line\">第9100批次，该批次的数据之和：52.78228888158892</span><br><span class=\"line\">第9200批次，该批次的数据之和：-21.00762549901342</span><br><span class=\"line\">第9300批次，该批次的数据之和：-21.380219319924976</span><br><span class=\"line\">第9400批次，该批次的数据之和：-25.89993133337054</span><br><span class=\"line\">第9500批次，该批次的数据之和：8.653750464608649</span><br><span class=\"line\">第9600批次，该批次的数据之和：-47.21038400234219</span><br><span class=\"line\">第9700批次，该批次的数据之和：25.37845335924261</span><br><span class=\"line\">第9800批次，该批次的数据之和：-14.943652726871015</span><br><span class=\"line\">第9900批次，该批次的数据之和：6.466367180724267</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-通用函数\"><a class=\"markdownIt-Anchor\" href=\"#6-通用函数\"></a> 6. 通用函数</h3>\n<p>Numpy提供两种基本的对象，即<strong>ndarray和ufunc对象</strong><br><br />\nufunc是一种能对数组中每个元素进行操作的函数<br></p>\n<h4 id=\"math与numpy函数的对比\"><a class=\"markdownIt-Anchor\" href=\"#math与numpy函数的对比\"></a> Math与Numpy函数的对比</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">x = [i*<span class=\"number\">0.001</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.arange(<span class=\"number\">1000000</span>)]</span><br><span class=\"line\">start = time.clock()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, t <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(x):</span><br><span class=\"line\">    x[i] = math.sin(t)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;math.sin:&quot;</span>, time.clock()-start)</span><br><span class=\"line\">x = [i*<span class=\"number\">0.001</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.arange(<span class=\"number\">1000000</span>)]</span><br><span class=\"line\">x = np.array(x)</span><br><span class=\"line\">start = time.clock()</span><br><span class=\"line\">np.sin(x) <span class=\"comment\"># numpy可以并行计算，不用循环</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;numpy.sin:&quot;</span>,time.clock()-start)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.sin: 0.5838227</span><br><span class=\"line\">numpy.sin: 0.032238599999999895</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>由此可见，numpy比math快10倍左右</p>\n<h4 id=\"循环和向量运算比较\"><a class=\"markdownIt-Anchor\" href=\"#循环和向量运算比较\"></a> 循环和向量运算比较</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">x1 = np.random.rand(<span class=\"number\">1000000</span>)</span><br><span class=\"line\">x2 = np.random.rand(<span class=\"number\">1000000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 使用循环计算向量的点积</span></span><br><span class=\"line\">tic = time.process_time() <span class=\"comment\"># 计算程序所用时间</span></span><br><span class=\"line\">dot = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(x1)):</span><br><span class=\"line\">    dot += x1[i]*x2[i]</span><br><span class=\"line\">toc = time.process_time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;dot = &quot;</span>+<span class=\"built_in\">str</span>(dot)+<span class=\"string\">&quot;\\nfor loop----- Computation time = &quot;</span>+<span class=\"built_in\">str</span>(<span class=\"number\">1000</span>*(toc-tic))+<span class=\"string\">&quot;ms&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">##使用numpy函数求点积</span></span><br><span class=\"line\">tic = time.process_time()</span><br><span class=\"line\">dot = <span class=\"number\">0</span></span><br><span class=\"line\">dot = np.dot(x1,x2)</span><br><span class=\"line\">toc = time.process_time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;dot = &quot;</span>+<span class=\"built_in\">str</span>(dot)+<span class=\"string\">&quot;\\nvector version----- Compution time = &quot;</span>+<span class=\"built_in\">str</span>(<span class=\"number\">1000</span>*(toc-tic))+<span class=\"string\">&quot;ms&quot;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dot = 249573.00014043407</span><br><span class=\"line\">for loop----- Computation time = 890.625ms</span><br><span class=\"line\">dot = 249573.0001404432</span><br><span class=\"line\">vector version----- Compution time = 31.25ms</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在深度学习算法中，一般都使用向量化矩阵进行运算</p>\n<h3 id=\"7-广播机制\"><a class=\"markdownIt-Anchor\" href=\"#7-广播机制\"></a> 7. 广播机制</h3>\n<p>Numpy的ufunc中要求输入数组是一致的,当数组的<strong>shape不相等</strong>时，则会使用<strong>广播机制</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np </span><br><span class=\"line\">A = np.arange(<span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">10</span>).reshape(<span class=\"number\">4</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">B = np.arange(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;A矩阵的形状：&#123;&#125;，B矩阵的形状：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(A.shape, B.shape))</span><br><span class=\"line\">C = A+B</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;C矩阵的形状：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(C.shape))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(C)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A矩阵的形状：(4, 1)，B矩阵的形状：(3,)</span><br><span class=\"line\">C矩阵的形状：(4, 3)</span><br><span class=\"line\">[[ 0  1  2]</span><br><span class=\"line\"> [10 11 12]</span><br><span class=\"line\"> [20 21 22]</span><br><span class=\"line\"> [30 31 32]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>广播机制的生效规则：</p>\n<ul>\n<li>所有输入数组都向其中shape最长的数组看齐，不足的部分通过在前面补1</li>\n<li>输出数组的shape是输入数组shape的各个轴上的最大值</li>\n<li>若输入数组的某个轴和输出数组的某个轴的长度相同或，某个轴的长度为1时，这个数组能被用来计算，否则出错</li>\n<li>当输入数组的某个轴的长度为1时，沿此轴运算时都用此轴上的第一组值</li>\n</ul>\n"},{"title":"paper","date":"2021-12-26T08:21:02.000Z","_content":"\n# Ideas\n\n1. 孪生神经网络\n2. bert\n3. 对抗网络在NLP中的应用","source":"_posts/paper.md","raw":"---\ntitle: paper\ndate: 2021-12-26 16:21:02\ntags: paper\n---\n\n# Ideas\n\n1. 孪生神经网络\n2. bert\n3. 对抗网络在NLP中的应用","slug":"paper","published":1,"updated":"2021-12-27T01:41:07.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxo1kfl7000fdwtf4yul8u7j","content":"<h1 id=\"ideas\"><a class=\"markdownIt-Anchor\" href=\"#ideas\"></a> Ideas</h1>\n<ol>\n<li>孪生神经网络</li>\n<li>bert</li>\n<li>对抗网络在NLP中的应用</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ideas\"><a class=\"markdownIt-Anchor\" href=\"#ideas\"></a> Ideas</h1>\n<ol>\n<li>孪生神经网络</li>\n<li>bert</li>\n<li>对抗网络在NLP中的应用</li>\n</ol>\n"},{"title":"常用激活函数概要","date":"2021-12-15T12:48:27.000Z","mathjax":true,"_content":"\n# 常用激活函数概要\n\n**激活函数作用：**\n\n> 考虑到真实世界，大多数系统是**非线性**的，如果要模拟复杂系统则必须借助非线性的激活函数！\n\n**通用近似理论(Universal Approximation Theorem):** \n\n> 神经网络中至少需要一层隐藏层和足够的神经元，利用非线性的激活函数，便可以模拟任何复杂的非线性函数。\n\n## 1. Sigmoid函数\n\n公式：\n\n$$ sigmoid(x) = \\frac{1}{1+e^{-x}} $$\n\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fs5.51cto.com%2Fwyfs02%2FM01%2F85%2F51%2FwKiom1egBxOBiT26AABfVHYjxlU640.jpg&refer=http%3A%2F%2Fs5.51cto.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642147041&t=2380c142f902867afbde4a2b9d36a1df\" height=\"300px\">\n\n特点：\n\n- Sigmoid的取值范围在$(0,1)$之间\n- Sigmoid函数的导值在$(0,0.25)$的连续区间\n\n缺点：\n\n1. 在神经网络模型，Sigmoid函数存在**\"梯度消失\"问题**：\n\n   在逆向参数调整（Back Propagation）过程中，使用链式法则（Chain Rule）可以推导出如下图所示的公式：\n\n   <img src=\"https://s4.ax1x.com/2021/12/15/TSG6eg.png\" height=\"150px\">\n\n   基于上图公式，对深度神经网络的权重调整幅度进行计算，上图中间部分是多个Sigmoid导数的乘积，多个0.25相乘后$(0.25*0.25*0.25*\\cdots*0.25)​$，权重逐渐趋于0，即导致”梯度消失“。\n\n2. Sigmoid函数在进行指数计算时会消耗较多的计算资源 \n\n## 2. tanh函数\n\n公式：\n$$\ntanh(x) = \\frac{e^x-e^{-x}}{e^x+e^{-x}}\n$$\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.soolco.com%2Fgroup1%2FM00%2F0E%2FEF%2FrBAADF-8cmqAP7ZBAACAfZwqipg022.png&refer=http%3A%2F%2Fwww.soolco.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642147920&t=e8fbccac442127ec2dfd2125e1950d3e\" height=\"400px\">\n\n特点：\n\n- tanh函数的值位于$(-1, 1)$区间\n- tanh函数的导数值位于$(0, 1)$区间，\n  - 因为tanh的导数值范围大于sigmoid，所以tanh显著缓解了梯度消失问题，但不能消除！\n\n## 3. ReLU函数\n\n公式：\n$$\nrelu(x) = max(0, x)\n$$\n<img src=\"https://img0.baidu.com/it/u=3033173174,2106807370&fm=26&fmt=auto\" height=\"300px\">\n\n**隐藏层的默认推荐函数：ReLU**\n\n特点：\n\n- ReLU在$x>0$时显示的线性特征，能够很好地解决梯度消失问题\n- 根据通用相似定理，ReLU函数整体的非线性又能够在神经网络中拟合任何复杂的连续函数\n- 当$x < 0$时，其函数值和导数值均为0，在逆向梯度调整时，不产生参数值的改变\n\n","source":"_posts/常用激活函数概要.md","raw":"---\ntitle: 常用激活函数概要\ndate: 2021-12-15 20:48:27\ntags: nlp 激活函数\nmathjax: true\n---\n\n# 常用激活函数概要\n\n**激活函数作用：**\n\n> 考虑到真实世界，大多数系统是**非线性**的，如果要模拟复杂系统则必须借助非线性的激活函数！\n\n**通用近似理论(Universal Approximation Theorem):** \n\n> 神经网络中至少需要一层隐藏层和足够的神经元，利用非线性的激活函数，便可以模拟任何复杂的非线性函数。\n\n## 1. Sigmoid函数\n\n公式：\n\n$$ sigmoid(x) = \\frac{1}{1+e^{-x}} $$\n\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fs5.51cto.com%2Fwyfs02%2FM01%2F85%2F51%2FwKiom1egBxOBiT26AABfVHYjxlU640.jpg&refer=http%3A%2F%2Fs5.51cto.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642147041&t=2380c142f902867afbde4a2b9d36a1df\" height=\"300px\">\n\n特点：\n\n- Sigmoid的取值范围在$(0,1)$之间\n- Sigmoid函数的导值在$(0,0.25)$的连续区间\n\n缺点：\n\n1. 在神经网络模型，Sigmoid函数存在**\"梯度消失\"问题**：\n\n   在逆向参数调整（Back Propagation）过程中，使用链式法则（Chain Rule）可以推导出如下图所示的公式：\n\n   <img src=\"https://s4.ax1x.com/2021/12/15/TSG6eg.png\" height=\"150px\">\n\n   基于上图公式，对深度神经网络的权重调整幅度进行计算，上图中间部分是多个Sigmoid导数的乘积，多个0.25相乘后$(0.25*0.25*0.25*\\cdots*0.25)​$，权重逐渐趋于0，即导致”梯度消失“。\n\n2. Sigmoid函数在进行指数计算时会消耗较多的计算资源 \n\n## 2. tanh函数\n\n公式：\n$$\ntanh(x) = \\frac{e^x-e^{-x}}{e^x+e^{-x}}\n$$\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.soolco.com%2Fgroup1%2FM00%2F0E%2FEF%2FrBAADF-8cmqAP7ZBAACAfZwqipg022.png&refer=http%3A%2F%2Fwww.soolco.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642147920&t=e8fbccac442127ec2dfd2125e1950d3e\" height=\"400px\">\n\n特点：\n\n- tanh函数的值位于$(-1, 1)$区间\n- tanh函数的导数值位于$(0, 1)$区间，\n  - 因为tanh的导数值范围大于sigmoid，所以tanh显著缓解了梯度消失问题，但不能消除！\n\n## 3. ReLU函数\n\n公式：\n$$\nrelu(x) = max(0, x)\n$$\n<img src=\"https://img0.baidu.com/it/u=3033173174,2106807370&fm=26&fmt=auto\" height=\"300px\">\n\n**隐藏层的默认推荐函数：ReLU**\n\n特点：\n\n- ReLU在$x>0$时显示的线性特征，能够很好地解决梯度消失问题\n- 根据通用相似定理，ReLU函数整体的非线性又能够在神经网络中拟合任何复杂的连续函数\n- 当$x < 0$时，其函数值和导数值均为0，在逆向梯度调整时，不产生参数值的改变\n\n","slug":"常用激活函数概要","published":1,"updated":"2021-12-16T12:45:52.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxo1kfl8000gdwtf8p3s1ebp","content":"<h1 id=\"常用激活函数概要\"><a class=\"markdownIt-Anchor\" href=\"#常用激活函数概要\"></a> 常用激活函数概要</h1>\n<p><strong>激活函数作用：</strong></p>\n<blockquote>\n<p>考虑到真实世界，大多数系统是<strong>非线性</strong>的，如果要模拟复杂系统则必须借助非线性的激活函数！</p>\n</blockquote>\n<p><strong>通用近似理论(Universal Approximation Theorem):</strong></p>\n<blockquote>\n<p>神经网络中至少需要一层隐藏层和足够的神经元，利用非线性的激活函数，便可以模拟任何复杂的非线性函数。</p>\n</blockquote>\n<h2 id=\"1-sigmoid函数\"><a class=\"markdownIt-Anchor\" href=\"#1-sigmoid函数\"></a> 1. Sigmoid函数</h2>\n<p>公式：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">sigmoid(x) = \\frac{1}{1+e^{-x}} \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.697331em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fs5.51cto.com%2Fwyfs02%2FM01%2F85%2F51%2FwKiom1egBxOBiT26AABfVHYjxlU640.jpg&refer=http%3A%2F%2Fs5.51cto.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642147041&t=2380c142f902867afbde4a2b9d36a1df\" height=\"300px\">\n<p>特点：</p>\n<ul>\n<li>Sigmoid的取值范围在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>之间</li>\n<li>Sigmoid函数的导值在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>0.25</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0,0.25)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mclose\">)</span></span></span></span>的连续区间</li>\n</ul>\n<p>缺点：</p>\n<ol>\n<li>\n<p>在神经网络模型，Sigmoid函数存在**&quot;梯度消失&quot;问题**：</p>\n<p>在逆向参数调整（Back Propagation）过程中，使用链式法则（Chain Rule）可以推导出如下图所示的公式：</p>\n<img src=\"https://s4.ax1x.com/2021/12/15/TSG6eg.png\" height=\"150px\">\n<p>基于上图公式，对深度神经网络的权重调整幅度进行计算，上图中间部分是多个Sigmoid导数的乘积，多个0.25相乘后<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0.25</mn><mo>∗</mo><mn>0.25</mn><mo>∗</mo><mn>0.25</mn><mo>∗</mo><mo>⋯</mo><mo>∗</mo><mn>0.25</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">​</mi></mrow><annotation encoding=\"application/x-tex\">(0.25*0.25*0.25*\\cdots*0.25)​</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mord\">​</span></span></span></span>，权重逐渐趋于0，即导致”梯度消失“。</p>\n</li>\n<li>\n<p>Sigmoid函数在进行指数计算时会消耗较多的计算资源</p>\n</li>\n</ol>\n<h2 id=\"2-tanh函数\"><a class=\"markdownIt-Anchor\" href=\"#2-tanh函数\"></a> 2. tanh函数</h2>\n<p>公式：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">tanh(x) = \\frac{e^x-e^{-x}}{e^x+e^{-x}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">h</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.217661em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.448331em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.590392em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.697331em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.soolco.com%2Fgroup1%2FM00%2F0E%2FEF%2FrBAADF-8cmqAP7ZBAACAfZwqipg022.png&refer=http%3A%2F%2Fwww.soolco.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642147920&t=e8fbccac442127ec2dfd2125e1950d3e\" height=\"400px\">\n<p>特点：</p>\n<ul>\n<li>tanh函数的值位于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-1, 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>区间</li>\n<li>tanh函数的导数值位于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>区间，\n<ul>\n<li>因为tanh的导数值范围大于sigmoid，所以tanh显著缓解了梯度消失问题，但不能消除！</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-relu函数\"><a class=\"markdownIt-Anchor\" href=\"#3-relu函数\"></a> 3. ReLU函数</h2>\n<p>公式：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>l</mi><mi>u</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">relu(x) = max(0, x)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">u</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<img src=\"https://img0.baidu.com/it/u=3033173174,2106807370&fm=26&fmt=auto\" height=\"300px\">\n<p><strong>隐藏层的默认推荐函数：ReLU</strong></p>\n<p>特点：</p>\n<ul>\n<li>ReLU在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x&gt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>时显示的线性特征，能够很好地解决梯度消失问题</li>\n<li>根据通用相似定理，ReLU函数整体的非线性又能够在神经网络中拟合任何复杂的连续函数</li>\n<li>当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x &lt; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>时，其函数值和导数值均为0，在逆向梯度调整时，不产生参数值的改变</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"常用激活函数概要\"><a class=\"markdownIt-Anchor\" href=\"#常用激活函数概要\"></a> 常用激活函数概要</h1>\n<p><strong>激活函数作用：</strong></p>\n<blockquote>\n<p>考虑到真实世界，大多数系统是<strong>非线性</strong>的，如果要模拟复杂系统则必须借助非线性的激活函数！</p>\n</blockquote>\n<p><strong>通用近似理论(Universal Approximation Theorem):</strong></p>\n<blockquote>\n<p>神经网络中至少需要一层隐藏层和足够的神经元，利用非线性的激活函数，便可以模拟任何复杂的非线性函数。</p>\n</blockquote>\n<h2 id=\"1-sigmoid函数\"><a class=\"markdownIt-Anchor\" href=\"#1-sigmoid函数\"></a> 1. Sigmoid函数</h2>\n<p>公式：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">sigmoid(x) = \\frac{1}{1+e^{-x}} \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.697331em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fs5.51cto.com%2Fwyfs02%2FM01%2F85%2F51%2FwKiom1egBxOBiT26AABfVHYjxlU640.jpg&refer=http%3A%2F%2Fs5.51cto.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642147041&t=2380c142f902867afbde4a2b9d36a1df\" height=\"300px\">\n<p>特点：</p>\n<ul>\n<li>Sigmoid的取值范围在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>之间</li>\n<li>Sigmoid函数的导值在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>0.25</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0,0.25)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mclose\">)</span></span></span></span>的连续区间</li>\n</ul>\n<p>缺点：</p>\n<ol>\n<li>\n<p>在神经网络模型，Sigmoid函数存在**&quot;梯度消失&quot;问题**：</p>\n<p>在逆向参数调整（Back Propagation）过程中，使用链式法则（Chain Rule）可以推导出如下图所示的公式：</p>\n<img src=\"https://s4.ax1x.com/2021/12/15/TSG6eg.png\" height=\"150px\">\n<p>基于上图公式，对深度神经网络的权重调整幅度进行计算，上图中间部分是多个Sigmoid导数的乘积，多个0.25相乘后<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0.25</mn><mo>∗</mo><mn>0.25</mn><mo>∗</mo><mn>0.25</mn><mo>∗</mo><mo>⋯</mo><mo>∗</mo><mn>0.25</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">​</mi></mrow><annotation encoding=\"application/x-tex\">(0.25*0.25*0.25*\\cdots*0.25)​</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mord\">​</span></span></span></span>，权重逐渐趋于0，即导致”梯度消失“。</p>\n</li>\n<li>\n<p>Sigmoid函数在进行指数计算时会消耗较多的计算资源</p>\n</li>\n</ol>\n<h2 id=\"2-tanh函数\"><a class=\"markdownIt-Anchor\" href=\"#2-tanh函数\"></a> 2. tanh函数</h2>\n<p>公式：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">tanh(x) = \\frac{e^x-e^{-x}}{e^x+e^{-x}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">h</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.217661em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.448331em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.590392em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.697331em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.soolco.com%2Fgroup1%2FM00%2F0E%2FEF%2FrBAADF-8cmqAP7ZBAACAfZwqipg022.png&refer=http%3A%2F%2Fwww.soolco.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642147920&t=e8fbccac442127ec2dfd2125e1950d3e\" height=\"400px\">\n<p>特点：</p>\n<ul>\n<li>tanh函数的值位于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-1, 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>区间</li>\n<li>tanh函数的导数值位于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>区间，\n<ul>\n<li>因为tanh的导数值范围大于sigmoid，所以tanh显著缓解了梯度消失问题，但不能消除！</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-relu函数\"><a class=\"markdownIt-Anchor\" href=\"#3-relu函数\"></a> 3. ReLU函数</h2>\n<p>公式：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>l</mi><mi>u</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">relu(x) = max(0, x)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">u</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<img src=\"https://img0.baidu.com/it/u=3033173174,2106807370&fm=26&fmt=auto\" height=\"300px\">\n<p><strong>隐藏层的默认推荐函数：ReLU</strong></p>\n<p>特点：</p>\n<ul>\n<li>ReLU在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x&gt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>时显示的线性特征，能够很好地解决梯度消失问题</li>\n<li>根据通用相似定理，ReLU函数整体的非线性又能够在神经网络中拟合任何复杂的连续函数</li>\n<li>当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x &lt; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>时，其函数值和导数值均为0，在逆向梯度调整时，不产生参数值的改变</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckxo1kfkd0000dwtf3w33h5le","tag_id":"ckxo1kfkp0002dwtf9all8643","_id":"ckxo1kfky0007dwtf9t7bayvl"},{"post_id":"ckxo1kfkm0001dwtfbh3lgh5e","tag_id":"ckxo1kfkx0006dwtfeh91foj1","_id":"ckxo1kfl10009dwtfgtlm6svw"},{"post_id":"ckxo1kfks0003dwtfcx2l4ryd","tag_id":"ckxo1kfkx0006dwtfeh91foj1","_id":"ckxo1kfl2000bdwtf8qbqfn9d"},{"post_id":"ckxo1kfku0004dwtf6u3m3wvj","tag_id":"ckxo1kfl1000adwtffn0c9n4b","_id":"ckxo1kfl3000ddwtfbuegdiu4"},{"post_id":"ckxo1kfkw0005dwtf6whyfw6q","tag_id":"ckxo1kfl2000cdwtfhqvchnd9","_id":"ckxo1kfl3000edwtfeu44fyb0"},{"post_id":"ckxo1kfl7000fdwtf4yul8u7j","tag_id":"ckxo1kfl9000hdwtf0laedswi","_id":"ckxo1kfla000jdwtfbzdw3dk5"},{"post_id":"ckxo1kfl8000gdwtf8p3s1ebp","tag_id":"ckxo1kfla000idwtfaxf17n6b","_id":"ckxo1kflb000kdwtf3o2iafqi"}],"Tag":[{"name":"nlp Bert","_id":"ckxo1kfkp0002dwtf9all8643"},{"name":"Docker","_id":"ckxo1kfkx0006dwtfeh91foj1"},{"name":"docker 工具问题集","_id":"ckxo1kfl1000adwtffn0c9n4b"},{"name":"Numpy","_id":"ckxo1kfl2000cdwtfhqvchnd9"},{"name":"paper","_id":"ckxo1kfl9000hdwtf0laedswi"},{"name":"nlp 激活函数","_id":"ckxo1kfla000idwtfaxf17n6b"}]}}